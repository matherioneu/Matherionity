From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mia <vottus@vott.us>
Date: Wed, 5 May 2021 04:07:40 +0200
Subject: [PATCH] fix(server): redismanager not removing the server


diff --git a/src/main/java/eu/matherion/server/redis/RedisManagerImpl.java b/src/main/java/eu/matherion/server/redis/RedisManagerImpl.java
index e0799fbaa3c8b49c2d5b075a577daa09b92e0817..1be85f5a2a024f60b35fa53c0e9cf54e774ea01b 100644
--- a/src/main/java/eu/matherion/server/redis/RedisManagerImpl.java
+++ b/src/main/java/eu/matherion/server/redis/RedisManagerImpl.java
@@ -1,8 +1,9 @@
 package eu.matherion.server.redis;
 
-import eu.matherion.api.redis.RedisManager;
 import eu.matherion.api.ServerState;
+import eu.matherion.api.redis.RedisManager;
 import org.redisson.Redisson;
+import org.redisson.api.RMap;
 import org.redisson.api.RedissonClient;
 import org.redisson.config.Config;
 
@@ -10,6 +11,7 @@ import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.net.URL;
+import java.util.Arrays;
 import java.util.Map;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Future;
@@ -23,6 +25,7 @@ public class RedisManagerImpl implements RedisManager<RedissonClient> {
     public RedisManagerImpl(Config config) {
         this.config = config;
         this.client = Redisson.create(config);
+        this.client.getMap("");
     }
 
     /**
@@ -55,25 +58,48 @@ public class RedisManagerImpl implements RedisManager<RedissonClient> {
     }
 
     @Override
-    public Map<String, ServerState> getServers() {
+    public RMap<String, ServerState> getServers() {
         return client.getMap("servers");
     }
 
     @Override
-    public Future<Map<String, ServerState>> getServersAsync() {
-        return client.getBuckets().getAsync("servers");
+    public void setServerState(String server, ServerState serverState) {
+        RMap<String, ServerState> servers = getServers();
+        servers.fastPut(server, serverState);
     }
 
     @Override
-    public void setServerState(String server, ServerState serverState) {
-        client.getMap("servers").put(server, serverState);
+    public void removeServer(String server) {
+        RMap<String, ServerState> servers = getServers();
+        servers.fastRemove(server);
     }
 
+    /**
+     * TODO: to be implemented
+     *
+     * @deprecated This function is not implemented.
+     */
     @Override
+    @Deprecated
+    public Future<Map<String, ServerState>> getServersAsync() {
+        throw new UnsupportedOperationException("Not implemented yet.");
+        // return client.getBuckets().getAsync("servers");
+    }
+
+    /**
+     * TODO: to be implemented
+     *
+     * @deprecated This function is not implemented.
+     */
+    @Override
+    @Deprecated
     public Future<Void> setServerStateAsync(String server, ServerState serverState) throws ExecutionException, InterruptedException {
-        Map<String, ServerState> states = getServersAsync().get();
-        states.put(server, serverState);
-        return client.getBuckets().setAsync(states);
+        throw new UnsupportedOperationException("Not implemented yet.");
+        /*
+            Map<String, ServerState> states = getServersAsync().get();
+            states.put(server, serverState);
+            return client.getBuckets().setAsync(states);
+        */
     }
 
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 62edcc5fcb3c06faa0b2780e0b40da016990e7b4..ba054b4b47087f536e33be0bec20db7d14d169a2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -950,7 +950,7 @@ public final class CraftServer implements Server {
 
     public void unloadRedis() {
         getLogger().info("[DB] Closing connection to Redis.");
-        getRedisManager().getServers().remove(getServerState().getName());
+        getRedisManager().removeServer(getFullServerName());
         getRedisManager().getClient().shutdown();
         redisManager = null;
     }
@@ -1012,7 +1012,16 @@ public final class CraftServer implements Server {
                 .setPassword(MatherionityConfig.redisPassword);
 
         this.redisManager = new RedisManagerImpl(config);
-        this.redisManager.setServerState(String.format("%s-%s", MatherionityConfig.serverName, MatherionityConfig.serverId), getServerState());
+        this.redisManager.setServerState(getFullServerName(), getServerState());
+    }
+
+    private String getFullServerName() {
+        return String.format("%s-%s", MatherionityConfig.serverName, MatherionityConfig.serverId);
+    }
+
+    public void setServerState(ServerState serverState) {
+        this.serverState = serverState;
+        this.redisManager.setServerState(getFullServerName(), serverState);
     }
     // Matherion end
 
