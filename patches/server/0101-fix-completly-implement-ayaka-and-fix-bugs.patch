From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mia <vottus@vott.us>
Date: Wed, 12 May 2021 06:33:53 +0200
Subject: [PATCH] fix: completly implement ayaka and fix bugs


diff --git a/pom.xml b/pom.xml
index ac814ae01491e2ef415a0ce44af81c861fdcbcf0..86dde79d5691f6d8e35f84921df5714c398b6a60 100644
--- a/pom.xml
+++ b/pom.xml
@@ -25,6 +25,14 @@
         <relativePath>../pom.xml</relativePath>
     </parent>
 
+    <repositories>
+        <repository>
+            <id>central</id>
+            <name>Maven Central</name>
+            <url>https://repo1.maven.org/maven2/</url>
+        </repository>
+    </repositories>
+
     <dependencyManagement>
         <dependencies>
             <dependency>
@@ -47,16 +55,20 @@
 
         <!-- how ya like em sockets -->
         <dependency>
-            <groupId>javax.websocket</groupId>
-            <artifactId>javax.websocket-api</artifactId>
-            <version>1.1</version>
+            <groupId>jakarta.websocket</groupId>
+            <artifactId>jakarta.websocket-api</artifactId>
+            <version>2.0.0</version>
         </dependency>
         <dependency>
             <groupId>com.google.code.gson</groupId>
             <artifactId>gson</artifactId>
             <version>2.8.0</version>
         </dependency>
-
+        <dependency>
+            <groupId>org.glassfish.tyrus.bundles</groupId>
+            <artifactId>tyrus-standalone-client</artifactId>
+            <version>2.0.0</version>
+        </dependency>
 
         <!-- because hikari -->
         <dependency>
@@ -79,12 +91,6 @@
             <version>1.16.5-R0.1-SNAPSHOT</version>
         </dependency>
 
-        <dependency>
-            <groupId>org.redisson</groupId>
-            <artifactId>redisson</artifactId>
-            <version>3.15.4</version>
-        </dependency>
-
         <!-- Matherion end -->
         <dependency>
             <groupId>com.destroystokyo.paper</groupId>
diff --git a/src/main/java/eu/matherion/server/ayaka/Ayaka.java b/src/main/java/eu/matherion/server/ayaka/Ayaka.java
index 03b4576ff5df88114f90eed4804b613ca31c81cf..da2cd9418dcda6c621f657035b1061cb602e01f5 100644
--- a/src/main/java/eu/matherion/server/ayaka/Ayaka.java
+++ b/src/main/java/eu/matherion/server/ayaka/Ayaka.java
@@ -1,11 +1,12 @@
 package eu.matherion.server.ayaka;
 
 import com.google.common.collect.Lists;
-import eu.matherion.api.servers.pubsub.ServerPubSub;
 import eu.matherion.api.servers.ServerState;
 import eu.matherion.api.servers.ServerStateUpdate;
+import eu.matherion.api.servers.pubsub.ServerPubSub;
 import eu.matherion.api.servers.pubsub.message.Action;
 import eu.matherion.api.servers.pubsub.subscriber.ServerStateUpdateSubscriber;
+import org.bukkit.configuration.ConfigurationSection;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 import java.io.IOException;
@@ -33,12 +34,18 @@ public class Ayaka implements ServerPubSub {
     setupClient();
   }
 
+  public Ayaka(ConfigurationSection section) throws Exception {
+    this(section.getString("url"));
+  }
+
   private void setupClient() {
     this.client.setAyakaMessageHandler((action, data) -> {
       if (action.equals("stateUpdate")) {
-        stateUpdateSubscribers.forEach((subscriber -> subscriber.accept((ServerStateUpdate) data)));
+        stateUpdateSubscribers.forEach(subscriber -> subscriber.accept((ServerStateUpdate) data));
       }
     });
+
+    this.client.connect();
   }
 
   public AyakaWebSocketClient getClient() {
@@ -73,7 +80,7 @@ public class Ayaka implements ServerPubSub {
   @Override
   public void close() {
     try {
-      getClient().getSession().close();
+      getClient().close();
     } catch (IOException e) {
       e.printStackTrace();
     }
diff --git a/src/main/java/eu/matherion/server/ayaka/AyakaWebSocketClient.java b/src/main/java/eu/matherion/server/ayaka/AyakaWebSocketClient.java
index 25053c8a3edc12a917d0e0adfa3c10dc84864484..cb0097fd72c05a98dd73fa533dfebd7728d55dc7 100644
--- a/src/main/java/eu/matherion/server/ayaka/AyakaWebSocketClient.java
+++ b/src/main/java/eu/matherion/server/ayaka/AyakaWebSocketClient.java
@@ -1,14 +1,18 @@
 package eu.matherion.server.ayaka;
 
 import com.google.gson.Gson;
+import eu.matherion.api.servers.pubsub.message.Event;
 import eu.matherion.server.ayaka.handler.AyakaMessageHandler;
-import eu.matherion.api.servers.pubsub.message.Action;
+import eu.matherion.server.ayaka.json.JsonDecoder;
+import eu.matherion.server.ayaka.json.JsonEncoder;
 import org.bukkit.Bukkit;
 
-import javax.websocket.*;
+import jakarta.websocket.*;
+
+import java.io.IOException;
 import java.net.URI;
 
-@ClientEndpoint
+@ClientEndpoint(decoders = {JsonDecoder.class}, encoders = {JsonEncoder.class})
 public class AyakaWebSocketClient {
 
   private Session session = null;
@@ -19,16 +23,30 @@ public class AyakaWebSocketClient {
 
   private AyakaMessageHandler ayakaMessageHandler = null;
 
+  private boolean reconnect = true;
+
+  private int connectAttempts = 0;
+
   public AyakaWebSocketClient(URI uri) {
     this.uri = uri;
   }
 
   public void connect() {
     try {
+      connectAttempts++;
+      Bukkit.getLogger().info(String.format("[Ayaka] Connection attempt #%s...", connectAttempts));
       WebSocketContainer container = ContainerProvider.getWebSocketContainer();
       container.connectToServer(this, this.uri);
+      connectAttempts = 0;
     } catch (Exception e) {
-      throw new RuntimeException(e);
+      Bukkit.getLogger().severe(String.format("[Ayaka] Connection attempt #%s failed, retrying in 5s.", connectAttempts));
+      Bukkit.getLogger().severe(String.format("[Ayaka] Error: %s", e.getMessage()));
+      try {
+        Thread.sleep(5000);
+        connect();
+      } catch (InterruptedException ex) {
+        ex.printStackTrace();
+      }
     }
   }
 
@@ -39,16 +57,25 @@ public class AyakaWebSocketClient {
   }
 
   @OnMessage
-  public void onMessage(String message) {
-    Action<Object> action = (Action<Object>) gson.fromJson(message, Action.class);
+  public void onMessage(Object obj) {
+    try {
+      Event event = Event.class.cast(obj);
 
-   if (ayakaMessageHandler != null)
-     ayakaMessageHandler.accept(action.action, action.data);
+      if (ayakaMessageHandler != null)
+        ayakaMessageHandler.accept(event.event, event.data);
+    } catch (ClassCastException e) {
+      Bukkit.getLogger().warning("[Ayaka] Recieved a non-Event message from the WebSocket");
+      Bukkit.getLogger().warning(obj.toString());
+    }
   }
 
   @OnClose
   public void onClose() {
     Bukkit.getLogger().warning("[Ayaka] Connection to WebSocket closed.");
+    if (reconnect) {
+      Bukkit.getLogger().info("[Ayaka] Attempting reconnect.");
+      connect();
+    }
     // TODO: reconnect, otheriwse shutdown
   }
 
@@ -63,4 +90,9 @@ public class AyakaWebSocketClient {
   public Session getSession() {
     return session;
   }
+
+  public void close() throws IOException {
+    this.reconnect = false;
+    getSession().close();
+  }
 }
diff --git a/src/main/java/eu/matherion/server/ayaka/json/JsonDecoder.java b/src/main/java/eu/matherion/server/ayaka/json/JsonDecoder.java
new file mode 100644
index 0000000000000000000000000000000000000000..11893447781bbfaee05812bfb6452b38090b5c90
--- /dev/null
+++ b/src/main/java/eu/matherion/server/ayaka/json/JsonDecoder.java
@@ -0,0 +1,35 @@
+package eu.matherion.server.ayaka.json;
+
+import com.google.gson.Gson;
+import jakarta.websocket.DecodeException;
+import jakarta.websocket.Decoder;
+import jakarta.websocket.EndpointConfig;
+
+public class JsonDecoder implements Decoder.Text<Object> {
+
+  private Gson gson = new Gson();
+
+  @Override
+  public Object decode(String s) throws DecodeException {
+    return gson.fromJson(s, Object.class);
+  }
+
+  @Override
+  public boolean willDecode(String s) {
+    try {
+      gson.fromJson(s, Object.class);
+      return true;
+    } catch(com.google.gson.JsonSyntaxException ex) {
+      return false;
+    }
+  }
+
+  @Override
+  public void init(EndpointConfig config) {
+  }
+
+  @Override
+  public void destroy() {
+  }
+}
+
diff --git a/src/main/java/eu/matherion/server/ayaka/json/JsonEncoder.java b/src/main/java/eu/matherion/server/ayaka/json/JsonEncoder.java
new file mode 100644
index 0000000000000000000000000000000000000000..234c6e60a44e63bbf1bd871e644131fedcc54487
--- /dev/null
+++ b/src/main/java/eu/matherion/server/ayaka/json/JsonEncoder.java
@@ -0,0 +1,26 @@
+package eu.matherion.server.ayaka.json;
+
+import com.google.gson.Gson;
+import jakarta.websocket.EncodeException;
+import jakarta.websocket.Encoder;
+import jakarta.websocket.EndpointConfig;
+
+public class JsonEncoder implements Encoder.Text<Object> {
+
+  private Gson gson = new Gson();
+
+  @Override
+  public String encode(Object object) throws EncodeException {
+    return this.gson.toJson(object);
+  }
+
+  @Override
+  public void init(EndpointConfig config) {
+  }
+
+  @Override
+  public void destroy() {
+  }
+
+
+}
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 62727c8913f587f630fa8372c1e5a05d74dde0fd..347f21147b78e2312e5ae5ae246df0d0e10c99d8 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -424,7 +424,10 @@ public abstract class PlayerList {
 
     // Matherion start
     public void updateServerState() {
-        cserver.setServerState(null);
+        if (cserver.getServerState() != null) {
+            cserver.getServerState().setOnline(getPlayerCount());
+            cserver.getServerState().setMax(getMaxPlayers());
+        }
         cserver.pushServerState();
     }
     // Matherion end
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 74f947926fa7e86d8c6ac0435604adbd34c274ab..1742746c606630720e4978b90eeaf3864fb54a84 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -16,7 +16,9 @@ import eu.matherion.api.StateType;
 import eu.matherion.api.database.DatabaseConnection;
 import eu.matherion.api.database.DatabaseManager;
 import eu.matherion.api.servers.ServerState;
+import eu.matherion.api.servers.ServerStateUpdate;
 import eu.matherion.api.servers.pubsub.ServerPubSub;
+import eu.matherion.api.servers.pubsub.subscriber.ServerStateUpdateSubscriber;
 import eu.matherion.server.config.MatherionityConfig;
 import eu.matherion.server.database.DatabaseManagerImpl;
 import io.netty.buffer.ByteBuf;
@@ -871,8 +873,7 @@ public final class CraftServer implements Server {
 
         // Matherion start
         unloadDatabase();
-
-        serverState = null;
+        unloadPubSub();
         // Matherion end
 
         // Paper start
@@ -918,8 +919,8 @@ public final class CraftServer implements Server {
         }
 
         // Matherion start
-        serverState = createServerState();
         loadDatabase();
+        loadPubSub();
         // Matherion end
 
         loadPlugins();
@@ -986,9 +987,22 @@ public final class CraftServer implements Server {
             e.printStackTrace();
             shutdown();
         }
+
+        this.serverState = createServerState();
+        this.pubSub = pubSub;
+
+        getLogger().info("[PubSub] Pushing initial server state");
+        pushServerState();
+
+        pubSub.addServerStateUpdateSubscriber(serverStateUpdate -> {
+            System.out.println("----update----");
+            System.out.println(serverStateUpdate);
+            System.out.println("----update----");
+        });
     }
 
     public void unloadPubSub() {
+        this.serverState = null;
         pubSub.close();
     }
 
