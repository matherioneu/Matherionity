From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mia <vottus@vott.us>
Date: Fri, 23 Apr 2021 20:22:21 +0200
Subject: [PATCH] feat: init database


diff --git a/pom.xml b/pom.xml
index de7da911833569c97b7f800a43ee7354d19677e2..80a031600e1ceb72855a023387f0af31e06a9f74 100644
--- a/pom.xml
+++ b/pom.xml
@@ -38,6 +38,21 @@
     </dependencyManagement>
 
     <dependencies>
+        <dependency>
+            <groupId>com.zaxxer</groupId>
+            <artifactId>HikariCP</artifactId>
+            <version>4.0.3</version>
+        </dependency>
+        <dependency>
+            <groupId>com.j256.ormlite</groupId>
+            <artifactId>ormlite-core</artifactId>
+            <version>5.3</version>
+        </dependency>
+        <dependency>
+            <groupId>com.j256.ormlite</groupId>
+            <artifactId>ormlite-jdbc</artifactId>
+            <version>5.3</version>
+        </dependency>
         <dependency>
             <groupId>com.tuinity</groupId>
             <artifactId>tuinity-api</artifactId>
diff --git a/src/main/java/eu/matherion/server/database/DatabaseConnection.java b/src/main/java/eu/matherion/server/database/DatabaseConnection.java
index e7b873541a4a216130a8b1d9a7d76dd671579c8f..d5e6037f2a89fa25a40f4d343cb3aaf52704af9a 100644
--- a/src/main/java/eu/matherion/server/database/DatabaseConnection.java
+++ b/src/main/java/eu/matherion/server/database/DatabaseConnection.java
@@ -1,2 +1,57 @@
-package eu.matherion.server.database;public class DatabaseConnection {
+package eu.matherion.server.database;
+
+import java.sql.Connection;
+import java.sql.SQLException;
+
+public interface DatabaseConnection<D extends javax.sql.DataSource> {
+
+    /**
+     * Gets the instance of DataSource
+     *
+     * @return The data source
+     */
+    public D getDataSource();
+
+    /**
+     * Gets the Database Type
+     *
+     * @return The database Type
+     */
+    public String getType();
+
+    /**
+     * Gets the Connection
+     *
+     * @param autoReconnect Auto reconnect if the connection is closed?
+     * @return The connection
+     */
+    public Connection getConnection(boolean autoReconnect) throws SQLException;
+
+    /**
+     * Gets the Connection with the auto-reconnect option set to true.
+     *
+     * @return The connection
+     */
+    public Connection getConnection() throws SQLException;
+
+    /**
+     * Closes the connection if it's not closed
+     * already.
+     */
+    public void closeConnection();
+
+    /**
+     * Checks whether the connection is closed.
+     *
+     * @return Is the connection closed?
+     */
+    public boolean isConnectionClosed();
+
+    /**
+     * Connects to the database. If the connection is already made,
+     * nothing happens.
+     *
+     * @return
+     */
+    public Connection connect() throws SQLException;
 }
diff --git a/src/main/java/eu/matherion/server/database/DatabaseManager.java b/src/main/java/eu/matherion/server/database/DatabaseManager.java
index 5ba8ec1c1a7a50ed7d31f5ddeac002e461edd1a7..2eebed10ab0e77b1d96533b600360a07b3d0dcf4 100644
--- a/src/main/java/eu/matherion/server/database/DatabaseManager.java
+++ b/src/main/java/eu/matherion/server/database/DatabaseManager.java
@@ -1,2 +1,55 @@
-package eu.matherion.server.database;public class DatabaseManager {
+package eu.matherion.server.database;
+
+import com.j256.ormlite.dao.Dao;
+import com.j256.ormlite.dao.DaoManager;
+import com.j256.ormlite.jdbc.DataSourceConnectionSource;
+import com.j256.ormlite.table.TableUtils;
+import org.jetbrains.annotations.Nullable;
+
+import javax.sql.DataSource;
+import java.sql.SQLException;
+import java.util.Collections;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
+public class DatabaseManager {
+
+    private DatabaseConnection<DataSource> connection;
+
+    private DataSourceConnectionSource connectionSource;
+
+    private Map<Class, Dao> daoInstances = Collections.emptyMap();
+
+    public DatabaseManager(DatabaseConnection<DataSource> connection) throws SQLException {
+        this.connection = connection;
+        this.connectionSource = new DataSourceConnectionSource(this.connection.getDataSource(), this.connection.getType());
+    }
+
+    @Nullable
+    public <T, I> Dao<T, I> getDao(Class<? extends T> dao) {
+        Dao daoInstance = daoInstances.get(dao);
+        if (daoInstance != null) return daoInstance;
+
+        Logger
+                .getLogger(getClass().getSimpleName())
+                .log(Level.WARNING, "Dao not registered at startup; this is a no-op, but please register it upon loading your plugin.");
+
+        try {
+            loadDao(dao);
+        } catch (SQLException e) {
+            return null;
+        }
+
+        return (Dao<T, I>) daoInstances.get(dao);
+    }
+
+    public void loadDao(Class dao) throws SQLException {
+        if (daoInstances.get(dao) != null) return;
+
+        Dao daoInstance = DaoManager.createDao(this.connectionSource, dao);
+        TableUtils.createTableIfNotExists(this.connectionSource, dao);
+
+        daoInstances.put(dao, daoInstance);
+    }
 }
diff --git a/src/main/java/eu/matherion/server/database/impl/HikariConnection.java b/src/main/java/eu/matherion/server/database/impl/HikariConnection.java
index 7b6bf59068a722772dcd9bd587e2caf981d8006a..99359df32248b036c9c746ec55a3e20371898730 100644
--- a/src/main/java/eu/matherion/server/database/impl/HikariConnection.java
+++ b/src/main/java/eu/matherion/server/database/impl/HikariConnection.java
@@ -1,2 +1,63 @@
-package eu.matherion.server.database.impl;public class HikariConnection {
+package eu.matherion.server.database.impl;
+
+import com.zaxxer.hikari.HikariConfig;
+import com.zaxxer.hikari.HikariDataSource;
+import eu.matherion.server.database.DatabaseConnection;
+import org.jetbrains.annotations.Nullable;
+
+import java.sql.Connection;
+import java.sql.SQLException;
+
+public class HikariConnection implements DatabaseConnection<HikariDataSource> {
+
+    private HikariDataSource dataSource = null;
+
+    private HikariConfig config;
+
+    public HikariConnection(HikariConfig config) {
+        this.config = config;
+    }
+
+    @Override
+    public HikariDataSource getDataSource() {
+        return dataSource;
+    }
+
+    @Override
+    public String getType() {
+        return "mysql";
+    }
+
+    @Override
+    @Nullable
+    public Connection getConnection(boolean autoReconnect) throws SQLException {
+        if (dataSource == null) {
+            if (autoReconnect) connect();
+            else return null;
+        }
+        return dataSource.getConnection();
+    }
+
+    @Override
+    @Nullable
+    public Connection getConnection() throws SQLException {
+        return getConnection(true);
+    }
+
+    @Override
+    public void closeConnection() {
+        if (dataSource == null) return;
+        dataSource.close();
+    }
+
+    @Override
+    public boolean isConnectionClosed() {
+        return dataSource == null || dataSource.isClosed();
+    }
+
+    @Override
+    public Connection connect() throws SQLException {
+        if (dataSource == null) dataSource = new HikariDataSource(config);
+        return dataSource.getConnection();
+    }
 }
