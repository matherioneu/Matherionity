From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mia <vottus@vott.us>
Date: Fri, 14 May 2021 05:07:35 +0200
Subject: [PATCH] feat: complete Ayaka implementation + auth


diff --git a/src/main/java/eu/matherion/api/servers/ServerState.java b/src/main/java/eu/matherion/api/servers/data/ServerState.java
similarity index 82%
rename from src/main/java/eu/matherion/api/servers/ServerState.java
rename to src/main/java/eu/matherion/api/servers/data/ServerState.java
index 3d82e83ce4d83a3ed6735e5f2a53f5519b078955..125382fa6b199a606bc638a83397a424db35cc57 100644
--- a/src/main/java/eu/matherion/api/servers/ServerState.java
+++ b/src/main/java/eu/matherion/api/servers/data/ServerState.java
@@ -1,12 +1,13 @@
-package eu.matherion.api.servers;
+package eu.matherion.api.servers.data;
 
-import eu.matherion.api.StateType;
 import eu.matherion.api.TeamMode;
+import eu.matherion.api.utils.JsonSerializable;
+import kong.unirest.json.JSONObject;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 import java.io.Serializable;
 
-public class ServerState implements Serializable {
+public class ServerState extends JsonSerializable implements Serializable {
 
     public int id = 0;
 
@@ -52,6 +53,18 @@ public class ServerState implements Serializable {
         this.privateServer = privateServer;
     }
 
+    public ServerState(JSONObject object) {
+        this(
+          object.getInt("id"),
+          object.getString("name"),
+          object.has("teamMode") ? object.getEnum(TeamMode.class, "teamMode") : null,
+          object.getEnum(StateType.class, "stateType"),
+          object.getBoolean("privateServer"),
+          object.getInt("online"),
+          object.getInt("max")
+        );
+    }
+
     public int getId() {
         return id;
     }
diff --git a/src/main/java/eu/matherion/api/servers/ServerStateUpdate.java b/src/main/java/eu/matherion/api/servers/data/ServerStateUpdate.java
similarity index 82%
rename from src/main/java/eu/matherion/api/servers/ServerStateUpdate.java
rename to src/main/java/eu/matherion/api/servers/data/ServerStateUpdate.java
index 11aabf45190d23ed09123542a93073da3bf658c5..5b40778e59a694c0049cbf1658964111b6d8f88d 100644
--- a/src/main/java/eu/matherion/api/servers/ServerStateUpdate.java
+++ b/src/main/java/eu/matherion/api/servers/data/ServerStateUpdate.java
@@ -1,7 +1,6 @@
-package eu.matherion.api.servers;
+package eu.matherion.api.servers.data;
 
 import com.google.gson.annotations.Expose;
-import eu.matherion.api.servers.ServerState;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
 public class ServerStateUpdate {
@@ -16,9 +15,6 @@ public class ServerStateUpdate {
     public ServerStateUpdate(String serverName, @Nullable ServerState serverState) {
         this.serverName = serverName;
         this.serverState = serverState;
-        System.out.println("New ServerUpdate");
-        System.out.println(serverName);
-        System.out.println(serverState);
     }
 
     public String getServerName() {
diff --git a/src/main/java/eu/matherion/api/StateType.java b/src/main/java/eu/matherion/api/servers/data/StateType.java
similarity index 86%
rename from src/main/java/eu/matherion/api/StateType.java
rename to src/main/java/eu/matherion/api/servers/data/StateType.java
index 7063de885f0400d7256155536f01ac9309ff67a3..86713237b9cbf1dc4edfcf3602a76ea2d6606a97 100644
--- a/src/main/java/eu/matherion/api/StateType.java
+++ b/src/main/java/eu/matherion/api/servers/data/StateType.java
@@ -1,4 +1,4 @@
-package eu.matherion.api;
+package eu.matherion.api.servers.data;
 
 public enum StateType {
     WAITING("Čekání na hráče"),
diff --git a/src/main/java/eu/matherion/api/servers/data/fetch/data/FetchAllStatesData.java b/src/main/java/eu/matherion/api/servers/data/fetch/data/FetchAllStatesData.java
new file mode 100644
index 0000000000000000000000000000000000000000..523f4d7e16c97ee25f386e1760346d5e945c2b7d
--- /dev/null
+++ b/src/main/java/eu/matherion/api/servers/data/fetch/data/FetchAllStatesData.java
@@ -0,0 +1,24 @@
+package eu.matherion.api.servers.data.fetch.data;
+
+import org.checkerframework.checker.nullness.qual.Nullable;
+
+public class FetchAllStatesData {
+
+  @Nullable
+  public String name;
+
+  public FetchAllStatesData(@Nullable String name) {
+    this.name = name;
+  }
+
+  public FetchAllStatesData() {
+  }
+
+  @Override
+  public String toString() {
+    final StringBuilder sb = new StringBuilder("FetchAllStatesData{");
+    sb.append("name='").append(name).append('\'');
+    sb.append('}');
+    return sb.toString();
+  }
+}
\ No newline at end of file
diff --git a/src/main/java/eu/matherion/api/servers/data/fetch/data/FetchOneStateData.java b/src/main/java/eu/matherion/api/servers/data/fetch/data/FetchOneStateData.java
new file mode 100644
index 0000000000000000000000000000000000000000..a738d3824658782b26e5f768f6cd7cb429ed7ea2
--- /dev/null
+++ b/src/main/java/eu/matherion/api/servers/data/fetch/data/FetchOneStateData.java
@@ -0,0 +1,22 @@
+package eu.matherion.api.servers.data.fetch.data;
+
+public class FetchOneStateData {
+
+  public Integer id;
+
+  public String name;
+
+  public FetchOneStateData(Integer id, String name) {
+    this.id = id;
+    this.name = name;
+  }
+
+  @Override
+  public String toString() {
+    final StringBuilder sb = new StringBuilder("FetchOneStateData{");
+    sb.append("id=").append(id);
+    sb.append(", name='").append(name).append('\'');
+    sb.append('}');
+    return sb.toString();
+  }
+}
\ No newline at end of file
diff --git a/src/main/java/eu/matherion/api/servers/data/fetch/response/FetchAllStatesResponse.java b/src/main/java/eu/matherion/api/servers/data/fetch/response/FetchAllStatesResponse.java
new file mode 100644
index 0000000000000000000000000000000000000000..79cd9046bd00db4bead3d07136df6d22b4674e5c
--- /dev/null
+++ b/src/main/java/eu/matherion/api/servers/data/fetch/response/FetchAllStatesResponse.java
@@ -0,0 +1,22 @@
+package eu.matherion.api.servers.data.fetch.response;
+
+import eu.matherion.api.servers.data.ServerState;
+import eu.matherion.api.utils.JsonSerializable;
+import kong.unirest.json.JSONObject;
+import org.checkerframework.checker.nullness.qual.Nullable;
+
+import java.util.Map;
+
+public class FetchAllStatesResponse extends JsonSerializable {
+
+  public Map<String, ServerState> states;
+
+  public FetchAllStatesResponse(@Nullable Map<String, ServerState> states) {
+    this.states = states == null ? Map.of() : states;
+  }
+
+  public FetchAllStatesResponse(JSONObject object) {
+    this.states = (Map) object.getJSONObject("states").toMap(); // mmmmmm unsafee cast what could go wrong
+  }
+
+}
diff --git a/src/main/java/eu/matherion/api/servers/data/fetch/response/FetchOneStateResponse.java b/src/main/java/eu/matherion/api/servers/data/fetch/response/FetchOneStateResponse.java
new file mode 100644
index 0000000000000000000000000000000000000000..afcb2c9d90b55beb8df2997427976aff2ffccd2f
--- /dev/null
+++ b/src/main/java/eu/matherion/api/servers/data/fetch/response/FetchOneStateResponse.java
@@ -0,0 +1,32 @@
+package eu.matherion.api.servers.data.fetch.response;
+
+import eu.matherion.api.TeamMode;
+import eu.matherion.api.servers.data.ServerState;
+import eu.matherion.api.servers.data.StateType;
+import eu.matherion.api.utils.JsonSerializable;
+import kong.unirest.json.JSONObject;
+import org.checkerframework.checker.nullness.qual.Nullable;
+
+public class FetchOneStateResponse extends JsonSerializable {
+
+  @Nullable
+  public ServerState state;
+
+  public FetchOneStateResponse(@Nullable ServerState state) {
+    this.state = state;
+  }
+
+  public FetchOneStateResponse(JSONObject object) {
+    JSONObject obj = object.getJSONObject("state");
+    this.state = new ServerState(
+      obj.getInt("id"),
+      obj.getString("name"),
+      obj.getEnum(TeamMode.class, "teamMode"),
+      obj.getEnum(StateType.class, "stateType"),
+      obj.getBoolean("privateServer"),
+      obj.getInt("online"),
+      obj.getInt("max")
+    );
+  }
+
+}
diff --git a/src/main/java/eu/matherion/api/servers/db/Session.java b/src/main/java/eu/matherion/api/servers/db/Session.java
new file mode 100644
index 0000000000000000000000000000000000000000..f3df86f41f3fdf3b67140c40c732c6d7d0287713
--- /dev/null
+++ b/src/main/java/eu/matherion/api/servers/db/Session.java
@@ -0,0 +1,42 @@
+package eu.matherion.api.servers.db;
+
+import com.j256.ormlite.field.DataType;
+import com.j256.ormlite.field.DatabaseField;
+import com.j256.ormlite.table.DatabaseTable;
+
+import java.util.UUID;
+
+@DatabaseTable(tableName = "ayaka_sessions")
+public class Session {
+
+  @DatabaseField(id = true, dataType = DataType.UUID)
+  private UUID id = UUID.randomUUID();
+
+  @DatabaseField(columnName = "serverName")
+  private String serverName;
+
+  public Session() {
+
+  }
+
+  public Session(String serverName) {
+    this.serverName = serverName;
+  }
+
+  public UUID getId() {
+    return id;
+  }
+
+  public void setId(UUID id) {
+    this.id = id;
+  }
+
+  public String getServerName() {
+    return serverName;
+  }
+
+  public void setServerName(String serverName) {
+    this.serverName = serverName;
+  }
+}
+
diff --git a/src/main/java/eu/matherion/api/servers/pubsub/ServerPubSub.java b/src/main/java/eu/matherion/api/servers/pubsub/ServerPubSub.java
index f825531696b820acabe4ed15a828ff6b49ea6dce..e13d8ce12d2891d4aaa6fc7366388e31ef1cdfeb 100644
--- a/src/main/java/eu/matherion/api/servers/pubsub/ServerPubSub.java
+++ b/src/main/java/eu/matherion/api/servers/pubsub/ServerPubSub.java
@@ -1,9 +1,13 @@
 package eu.matherion.api.servers.pubsub;
 
-import eu.matherion.api.servers.ServerState;
+import eu.matherion.api.servers.data.ServerState;
+import eu.matherion.api.servers.data.fetch.data.FetchAllStatesData;
+import eu.matherion.api.servers.data.fetch.data.FetchOneStateData;
 import eu.matherion.api.servers.pubsub.subscriber.ServerStateUpdateSubscriber;
 import org.checkerframework.checker.nullness.qual.Nullable;
 
+import java.util.Map;
+
 public interface ServerPubSub {
   void updateServerState(String serverName, @Nullable ServerState serverState);
 
@@ -15,5 +19,18 @@ public interface ServerPubSub {
 
   <T> void sendAction(String action, T data);
 
+  public void askForOneState(FetchOneStateData data);
+
+  public void askForAllStates(FetchAllStatesData data);
+
+  @Nullable
+  public ServerState getOneState(FetchOneStateData data);
+
+  @Nullable
+  public Map<String, ServerState> getAllStates(FetchAllStatesData data);
+
+  @Nullable
+  public Map<String, ServerState> getAllStates();
+
   void close();
 }
diff --git a/src/main/java/eu/matherion/api/servers/pubsub/subscriber/ServerStateUpdateSubscriber.java b/src/main/java/eu/matherion/api/servers/pubsub/subscriber/ServerStateUpdateSubscriber.java
index e590f62d09aa17653f0f6a1ae56ebdb4a43ea50b..e2fa30af0e9c1e01208017f7c739251b1cedf174 100644
--- a/src/main/java/eu/matherion/api/servers/pubsub/subscriber/ServerStateUpdateSubscriber.java
+++ b/src/main/java/eu/matherion/api/servers/pubsub/subscriber/ServerStateUpdateSubscriber.java
@@ -1,6 +1,6 @@
 package eu.matherion.api.servers.pubsub.subscriber;
 
-import eu.matherion.api.servers.ServerStateUpdate;
+import eu.matherion.api.servers.data.ServerStateUpdate;
 
 public interface ServerStateUpdateSubscriber extends Subscriber<ServerStateUpdate> {
 }
diff --git a/src/main/java/eu/matherion/api/utils/JsonSerializable.java b/src/main/java/eu/matherion/api/utils/JsonSerializable.java
new file mode 100644
index 0000000000000000000000000000000000000000..0c1765dfafc47a3a2e793f777020c759c3445c6b
--- /dev/null
+++ b/src/main/java/eu/matherion/api/utils/JsonSerializable.java
@@ -0,0 +1,16 @@
+package eu.matherion.api.utils;
+
+import kong.unirest.json.JSONObject;
+
+/**
+ * Marks the class as containing the Class(JSONObject obj) constructor.
+ */
+public abstract class JsonSerializable {
+
+  public JsonSerializable() {
+  }
+
+  public JsonSerializable(JSONObject object) {
+  }
+
+}
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index ea4e332f2dc0850991a45ca2e31150dc70da633f..fe0ca83c16f2de7ce8c6d5c679fbcf575a837856 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -1,30 +1,13 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableList;
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.Serializable;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-import java.util.function.Consumer;
-import java.util.logging.Logger;
-
-import eu.matherion.api.servers.ServerState;
 import eu.matherion.api.database.DatabaseManager;
+import eu.matherion.api.servers.data.ServerState;
 import eu.matherion.api.servers.pubsub.ServerPubSub;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.block.data.BlockData;
-import org.bukkit.boss.BarColor;
-import org.bukkit.boss.BarFlag;
-import org.bukkit.boss.BarStyle;
-import org.bukkit.boss.BossBar;
-import org.bukkit.boss.KeyedBossBar;
+import org.bukkit.boss.*;
 import org.bukkit.command.CommandException;
 import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
@@ -36,12 +19,7 @@ import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.server.ServerListPingEvent;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.help.HelpMap;
-import org.bukkit.inventory.Inventory;
-import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.inventory.ItemFactory;
-import org.bukkit.inventory.ItemStack;
-import org.bukkit.inventory.Merchant;
-import org.bukkit.inventory.Recipe;
+import org.bukkit.inventory.*;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.loot.LootTable;
 import org.bukkit.map.MapView;
@@ -57,1698 +35,1721 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.awt.image.BufferedImage;
+import java.io.File;
+import java.io.Serializable;
+import java.util.*;
+import java.util.function.Consumer;
+import java.util.logging.Logger;
+
 /**
  * Represents a server implementation.
  */
 public interface Server extends PluginMessageRecipient, net.kyori.adventure.audience.ForwardingAudience { // Paper
 
-    /**
-     * Used for all administrative messages, such as an operator using a
-     * command.
-     * <p>
-     * For use in {@link #broadcast(java.lang.String, java.lang.String)}.
-     */
-    public static final String BROADCAST_CHANNEL_ADMINISTRATIVE = "bukkit.broadcast.admin";
-
-    /**
-     * Used for all announcement messages, such as informing users that a
-     * player has joined.
-     * <p>
-     * For use in {@link #broadcast(java.lang.String, java.lang.String)}.
-     */
-    public static final String BROADCAST_CHANNEL_USERS = "bukkit.broadcast.user";
-
-    /**
-     * Gets the name of this server implementation.
-     *
-     * @return name of this server implementation
-     */
-    @NotNull
-    public String getName();
-
-    /**
-     * Gets the version string of this server implementation.
-     *
-     * @return version of this server implementation + MC version.
-     */
-    @NotNull
-    public String getVersion();
-
-    // Matherion start
-    /**
-     * Gets the version string of this server implementation,
-     * without the Minecraft version.
-     *
-     * @return version of this server implementation
-     */
-    @NotNull
-    public String getRawVersion();
-    // Matherion end
+  /**
+   * Used for all administrative messages, such as an operator using a
+   * command.
+   * <p>
+   * For use in {@link #broadcast(java.lang.String, java.lang.String)}.
+   */
+  public static final String BROADCAST_CHANNEL_ADMINISTRATIVE = "bukkit.broadcast.admin";
+
+  /**
+   * Used for all announcement messages, such as informing users that a
+   * player has joined.
+   * <p>
+   * For use in {@link #broadcast(java.lang.String, java.lang.String)}.
+   */
+  public static final String BROADCAST_CHANNEL_USERS = "bukkit.broadcast.user";
+
+  /**
+   * Gets the name of this server implementation.
+   *
+   * @return name of this server implementation
+   */
+  @NotNull
+  public String getName();
+
+  /**
+   * Gets the version string of this server implementation.
+   *
+   * @return version of this server implementation + MC version.
+   */
+  @NotNull
+  public String getVersion();
+
+  // Matherion start
+
+  /**
+   * Gets the version string of this server implementation,
+   * without the Minecraft version.
+   *
+   * @return version of this server implementation
+   */
+  @NotNull
+  public String getRawVersion();
+  // Matherion end
+
+  /**
+   * Gets the Bukkit version that this server is running.
+   *
+   * @return version of Bukkit
+   */
+  @NotNull
+  public String getBukkitVersion();
+
+  // Paper start - expose game version
+
+  /**
+   * Gets the version of game this server implements
+   *
+   * @return version of game
+   */
+  @NotNull
+  String getMinecraftVersion();
+  // Paper end
+
+  /**
+   * Gets a view of all currently logged in players. This {@linkplain
+   * Collections#unmodifiableCollection(Collection) view} is a reused
+   * object, making some operations like {@link Collection#size()}
+   * zero-allocation.
+   * <p>
+   * The collection is a view backed by the internal representation, such
+   * that, changes to the internal state of the server will be reflected
+   * immediately. However, the reuse of the returned collection (identity)
+   * is not strictly guaranteed for future or all implementations. Casting
+   * the collection, or relying on interface implementations (like {@link
+   * Serializable} or {@link List}), is deprecated.
+   * <p>
+   * Iteration behavior is undefined outside of self-contained main-thread
+   * uses. Normal and immediate iterator use without consequences that
+   * affect the collection are fully supported. The effects following
+   * (non-exhaustive) {@link Entity#teleport(Location) teleportation},
+   * {@link Player#setHealth(double) death}, and {@link Player#kickPlayer(
+   *String) kicking} are undefined. Any use of this collection from
+   * asynchronous threads is unsafe.
+   * <p>
+   * For safe consequential iteration or mimicking the old array behavior,
+   * using {@link Collection#toArray(Object[])} is recommended. For making
+   * snapshots, {@link ImmutableList#copyOf(Collection)} is recommended.
+   *
+   * @return a view of currently online players.
+   */
+  @NotNull
+  public Collection<? extends Player> getOnlinePlayers();
+
+  /**
+   * Get the maximum amount of players which can login to this server.
+   *
+   * @return the amount of players this server allows
+   */
+  public int getMaxPlayers();
+
+  // Paper start
+
+  /**
+   * Set the maximum amount of players which can login to this server.
+   *
+   * @param maxPlayers the amount of players this server allows
+   */
+  public void setMaxPlayers(int maxPlayers);
+  // Paper end
+
+  /**
+   * Get the game port that the server runs on.
+   *
+   * @return the port number of this server
+   */
+  public int getPort();
+
+  /**
+   * Get the view distance from this server.
+   *
+   * @return the view distance from this server.
+   */
+  public int getViewDistance();
+
+  /**
+   * Get the IP that this server is bound to, or empty string if not
+   * specified.
+   *
+   * @return the IP string that this server is bound to, otherwise empty
+   * string
+   */
+  @NotNull
+  public String getIp();
+
+  /**
+   * Get world type (level-type setting) for default world.
+   *
+   * @return the value of level-type (e.g. DEFAULT, FLAT, DEFAULT_1_1)
+   */
+  @NotNull
+  public String getWorldType();
+
+  /**
+   * Get generate-structures setting.
+   *
+   * @return true if structure generation is enabled, false otherwise
+   */
+  public boolean getGenerateStructures();
+
+  /**
+   * Get max world size.
+   *
+   * @return the maximum world size as specified for the server
+   */
+  public int getMaxWorldSize();
+
+  /**
+   * Gets whether this server allows the End or not.
+   *
+   * @return whether this server allows the End or not
+   */
+  public boolean getAllowEnd();
+
+  /**
+   * Gets whether this server allows the Nether or not.
+   *
+   * @return whether this server allows the Nether or not
+   */
+  public boolean getAllowNether();
+
+  /**
+   * Gets whether this server has a whitelist or not.
+   *
+   * @return whether this server has a whitelist or not
+   */
+  public boolean hasWhitelist();
+
+  /**
+   * Sets if the server is whitelisted.
+   *
+   * @param value true for whitelist on, false for off
+   */
+  public void setWhitelist(boolean value);
+
+  /**
+   * Gets a list of whitelisted players.
+   *
+   * @return a set containing all whitelisted players
+   */
+  @NotNull
+  public Set<OfflinePlayer> getWhitelistedPlayers();
+
+  /**
+   * Reloads the whitelist from disk.
+   */
+  public void reloadWhitelist();
+
+  /**
+   * Broadcast a message to all players.
+   * <p>
+   * This is the same as calling {@link #broadcast(java.lang.String,
+   * java.lang.String)} to {@link #BROADCAST_CHANNEL_USERS}
+   *
+   * @param message the message
+   * @return the number of players
+   * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
+   */
+  @Deprecated // Paper
+  public int broadcastMessage(@NotNull String message);
+
+  // Paper start
+
+  /**
+   * Sends the component to all online players.
+   *
+   * @param component the component to send
+   * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
+   */
+  @Deprecated
+  public default void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+    spigot().broadcast(component);
+  }
+
+  /**
+   * Sends an array of components as a single message to all online players.
+   *
+   * @param components the components to send
+   * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
+   */
+  @Deprecated
+  public default void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+    spigot().broadcast(components);
+  }
+  // Paper end
+
+  /**
+   * Gets the name of the update folder. The update folder is used to safely
+   * update plugins at the right moment on a plugin load.
+   * <p>
+   * The update folder name is relative to the plugins folder.
+   *
+   * @return the name of the update folder
+   */
+  @NotNull
+  public String getUpdateFolder();
+
+  /**
+   * Gets the update folder. The update folder is used to safely update
+   * plugins at the right moment on a plugin load.
+   *
+   * @return the update folder
+   */
+  @NotNull
+  public File getUpdateFolderFile();
+
+  /**
+   * Gets the value of the connection throttle setting.
+   *
+   * @return the value of the connection throttle setting
+   */
+  public long getConnectionThrottle();
+
+  /**
+   * Gets default ticks per animal spawns value.
+   * <p>
+   * <b>Example Usage:</b>
+   * <ul>
+   * <li>A value of 1 will mean the server will attempt to spawn monsters
+   *     every tick.
+   * <li>A value of 400 will mean the server will attempt to spawn monsters
+   *     every 400th tick.
+   * <li>A value below 0 will be reset back to Minecraft's default.
+   * </ul>
+   * <p>
+   * <b>Note:</b> If set to 0, animal spawning will be disabled. We
+   * recommend using spawn-animals to control this instead.
+   * <p>
+   * Minecraft default: 400.
+   *
+   * @return the default ticks per animal spawns value
+   */
+  public int getTicksPerAnimalSpawns();
+
+  /**
+   * Gets the default ticks per monster spawns value.
+   * <p>
+   * <b>Example Usage:</b>
+   * <ul>
+   * <li>A value of 1 will mean the server will attempt to spawn monsters
+   *     every tick.
+   * <li>A value of 400 will mean the server will attempt to spawn monsters
+   *     every 400th tick.
+   * <li>A value below 0 will be reset back to Minecraft's default.
+   * </ul>
+   * <p>
+   * <b>Note:</b> If set to 0, monsters spawning will be disabled. We
+   * recommend using spawn-monsters to control this instead.
+   * <p>
+   * Minecraft default: 1.
+   *
+   * @return the default ticks per monsters spawn value
+   */
+  public int getTicksPerMonsterSpawns();
+
+  /**
+   * Gets the default ticks per water mob spawns value.
+   * <p>
+   * <b>Example Usage:</b>
+   * <ul>
+   * <li>A value of 1 will mean the server will attempt to spawn water mobs
+   *     every tick.
+   * <li>A value of 400 will mean the server will attempt to spawn water mobs
+   *     every 400th tick.
+   * <li>A value below 0 will be reset back to Minecraft's default.
+   * </ul>
+   * <p>
+   * <b>Note:</b> If set to 0, water mobs spawning will be disabled.
+   * <p>
+   * Minecraft default: 1.
+   *
+   * @return the default ticks per water mobs spawn value
+   */
+  public int getTicksPerWaterSpawns();
+
+  /**
+   * Gets the default ticks per water ambient mob spawns value.
+   * <p>
+   * <b>Example Usage:</b>
+   * <ul>
+   * <li>A value of 1 will mean the server will attempt to spawn water ambient mobs
+   *     every tick.
+   * <li>A value of 400 will mean the server will attempt to spawn water ambient mobs
+   *     every 400th tick.
+   * <li>A value below 0 will be reset back to Minecraft's default.
+   * </ul>
+   * <p>
+   * <b>Note:</b> If set to 0, ambient mobs spawning will be disabled.
+   * <p>
+   * Minecraft default: 1.
+   *
+   * @return the default ticks per water ambient mobs spawn value
+   */
+  public int getTicksPerWaterAmbientSpawns();
+
+  /**
+   * Gets the default ticks per ambient mob spawns value.
+   * <p>
+   * <b>Example Usage:</b>
+   * <ul>
+   * <li>A value of 1 will mean the server will attempt to spawn ambient mobs
+   *     every tick.
+   * <li>A value of 400 will mean the server will attempt to spawn ambient mobs
+   *     every 400th tick.
+   * <li>A value below 0 will be reset back to Minecraft's default.
+   * </ul>
+   * <p>
+   * <b>Note:</b> If set to 0, ambient mobs spawning will be disabled.
+   * <p>
+   * Minecraft default: 1.
+   *
+   * @return the default ticks per ambient mobs spawn value
+   */
+  public int getTicksPerAmbientSpawns();
+
+  /**
+   * Gets a player object by the given username.
+   * <p>
+   * This method may not return objects for offline players.
+   *
+   * @param name the name to look up
+   * @return a player if one was found, null otherwise
+   */
+  @Nullable
+  public Player getPlayer(@NotNull String name);
+
+  /**
+   * Gets the player with the exact given name, case insensitive.
+   *
+   * @param name Exact name of the player to retrieve
+   * @return a player object if one was found, null otherwise
+   */
+  @Nullable
+  public Player getPlayerExact(@NotNull String name);
+
+  /**
+   * Attempts to match any players with the given name, and returns a list
+   * of all possibly matches.
+   * <p>
+   * This list is not sorted in any particular order. If an exact match is
+   * found, the returned list will only contain a single result.
+   *
+   * @param name the (partial) name to match
+   * @return list of all possible players
+   */
+  @NotNull
+  public List<Player> matchPlayer(@NotNull String name);
+
+  /**
+   * Gets the player with the given UUID.
+   *
+   * @param id UUID of the player to retrieve
+   * @return a player object if one was found, null otherwise
+   */
+  @Nullable
+  public Player getPlayer(@NotNull UUID id);
+
+  // Paper start
+
+  /**
+   * Gets the unique ID of the player currently known as the specified player name
+   * In Offline Mode, will return an Offline UUID
+   *
+   * @param playerName the player name to look up the unique ID for
+   * @return A UUID, or null if that player name is not registered with Minecraft and the server is in online mode
+   */
+  @Nullable
+  public UUID getPlayerUniqueId(@NotNull String playerName);
+  // Paper end
+
+  // Matherion start
+
+  /**
+   * Gets the database manager for interacting with the database.
+   *
+   * @return a database manager for this Server instance
+   */
+  @Nullable
+  public DatabaseManager getDatabaseManager();
+
+  /**
+   * Gets the PubSub for interacting with the Server PubSub Service.
+   *
+   * @return a ServerPubSub instance
+   */
+  @Nullable
+  public ServerPubSub getPubSub();
+
+  /**
+   * Gets the redis manager for interacting with Redis.
+   *
+   * @return a redis manager for this Server instance
+   */
+  public ServerState getServerState();
+  // Matherion end
+
+  /**
+   * Gets the plugin manager for interfacing with plugins.
+   *
+   * @return a plugin manager for this Server instance
+   */
+  @NotNull
+  public PluginManager getPluginManager();
+
+  /**
+   * Gets the scheduler for managing scheduled events.
+   *
+   * @return a scheduling service for this server
+   */
+  @NotNull
+  public BukkitScheduler getScheduler();
+
+  /**
+   * Gets a services manager.
+   *
+   * @return s services manager
+   */
+  @NotNull
+  public ServicesManager getServicesManager();
+
+  /**
+   * Gets a list of all worlds on this server.
+   *
+   * @return a list of worlds
+   */
+  @NotNull
+  public List<World> getWorlds();
+
+  /**
+   * Creates or loads a world with the given name using the specified
+   * options.
+   * <p>
+   * If the world is already loaded, it will just return the equivalent of
+   * getWorld(creator.name()).
+   *
+   * @param creator the options to use when creating the world
+   * @return newly created or loaded world
+   */
+  @Nullable
+  public World createWorld(@NotNull WorldCreator creator);
+
+  /**
+   * Unloads a world with the given name.
+   *
+   * @param name Name of the world to unload
+   * @param save whether to save the chunks before unloading
+   * @return true if successful, false otherwise
+   */
+  public boolean unloadWorld(@NotNull String name, boolean save);
+
+  /**
+   * Unloads the given world.
+   *
+   * @param world the world to unload
+   * @param save  whether to save the chunks before unloading
+   * @return true if successful, false otherwise
+   */
+  public boolean unloadWorld(@NotNull World world, boolean save);
+
+  /**
+   * Gets the world with the given name.
+   *
+   * @param name the name of the world to retrieve
+   * @return a world with the given name, or null if none exists
+   */
+  @Nullable
+  public World getWorld(@NotNull String name);
+
+  /**
+   * Gets the world from the given Unique ID.
+   *
+   * @param uid a unique-id of the world to retrieve
+   * @return a world with the given Unique ID, or null if none exists
+   */
+  @Nullable
+  public World getWorld(@NotNull UUID uid);
+
+  // Paper start
+
+  /**
+   * Gets the world from the given NamespacedKey
+   *
+   * @param worldKey the NamespacedKey of the world to retrieve
+   * @return a world with the given NamespacedKey, or null if none exists
+   */
+  @Nullable
+  public World getWorld(@NotNull NamespacedKey worldKey);
+  // Paper end
+
+  /**
+   * Gets the map from the given item ID.
+   *
+   * @param id the id of the map to get
+   * @return a map view if it exists, or null otherwise
+   * @deprecated Magic value
+   */
+  @Deprecated
+  @Nullable
+  public MapView getMap(int id);
+
+  /**
+   * Create a new map with an automatically assigned ID.
+   *
+   * @param world the world the map will belong to
+   * @return a newly created map view
+   */
+  @NotNull
+  public MapView createMap(@NotNull World world);
+
+  /**
+   * Create a new explorer map targeting the closest nearby structure of a
+   * given {@link StructureType}.
+   * <br>
+   * This method uses implementation default values for radius and
+   * findUnexplored (usually 100, true).
+   *
+   * @param world         the world the map will belong to
+   * @param location      the origin location to find the nearest structure
+   * @param structureType the type of structure to find
+   * @return a newly created item stack
+   * @see World#locateNearestStructure(org.bukkit.Location,
+   * org.bukkit.StructureType, int, boolean)
+   */
+  @NotNull
+  public ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType);
+
+  /**
+   * Create a new explorer map targeting the closest nearby structure of a
+   * given {@link StructureType}.
+   * <br>
+   * This method uses implementation default values for radius and
+   * findUnexplored (usually 100, true).
+   *
+   * @param world          the world the map will belong to
+   * @param location       the origin location to find the nearest structure
+   * @param structureType  the type of structure to find
+   * @param radius         radius to search, see World#locateNearestStructure for more
+   *                       information
+   * @param findUnexplored whether to find unexplored structures
+   * @return the newly created item stack
+   * @see World#locateNearestStructure(org.bukkit.Location,
+   * org.bukkit.StructureType, int, boolean)
+   */
+  @NotNull
+  public ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType, int radius, boolean findUnexplored);
+
+  /**
+   * Reloads the server, refreshing settings and plugin information.
+   */
+  public void reload();
+
+  /**
+   * Reload only the Minecraft data for the server. This includes custom
+   * advancements and loot tables.
+   */
+  public void reloadData();
+
+  /**
+   * Returns the primary logger associated with this server instance.
+   *
+   * @return Logger associated with this server
+   */
+  @NotNull
+  public Logger getLogger();
+
+  /**
+   * Gets a {@link PluginCommand} with the given name or alias.
+   *
+   * @param name the name of the command to retrieve
+   * @return a plugin command if found, null otherwise
+   */
+  @Nullable
+  public PluginCommand getPluginCommand(@NotNull String name);
+
+  /**
+   * Writes loaded players to disk.
+   */
+  public void savePlayers();
+
+  /**
+   * Dispatches a command on this server, and executes it if found.
+   *
+   * @param sender      the apparent sender of the command
+   * @param commandLine the command + arguments. Example: <code>test abc
+   *                    123</code>
+   * @return returns false if no target is found
+   * @throws CommandException thrown when the executor for the given command
+   *                          fails with an unhandled exception
+   */
+  public boolean dispatchCommand(@NotNull CommandSender sender, @NotNull String commandLine) throws CommandException;
+
+  /**
+   * Adds a recipe to the crafting manager.
+   *
+   * @param recipe the recipe to add
+   * @return true if the recipe was added, false if it wasn't for some
+   * reason
+   */
+  @Contract("null -> false")
+  public boolean addRecipe(@Nullable Recipe recipe);
+
+  /**
+   * Get a list of all recipes for a given item. The stack size is ignored
+   * in comparisons. If the durability is -1, it will match any data value.
+   *
+   * @param result the item to match against recipe results
+   * @return a list of recipes with the given result
+   */
+  @NotNull
+  public List<Recipe> getRecipesFor(@NotNull ItemStack result);
+
+  /**
+   * Get the {@link Recipe} for the given key.
+   *
+   * @param recipeKey the key of the recipe to return
+   * @return the recipe for the given key or null.
+   */
+  @Nullable
+  public Recipe getRecipe(@NotNull NamespacedKey recipeKey);
+
+  /**
+   * Get an iterator through the list of crafting recipes.
+   *
+   * @return an iterator
+   */
+  @NotNull
+  public Iterator<Recipe> recipeIterator();
+
+  /**
+   * Clears the list of crafting recipes.
+   */
+  public void clearRecipes();
+
+  /**
+   * Resets the list of crafting recipes to the default.
+   */
+  public void resetRecipes();
+
+  /**
+   * Remove a recipe from the server.
+   *
+   * <b>Note that removing a recipe may cause permanent loss of data
+   * associated with that recipe (eg whether it has been discovered by
+   * players).</b>
+   *
+   * @param key NamespacedKey of recipe to remove.
+   * @return True if recipe was removed
+   */
+  public boolean removeRecipe(@NotNull NamespacedKey key);
+
+  /**
+   * Gets a list of command aliases defined in the server properties.
+   *
+   * @return a map of aliases to command names
+   */
+  @NotNull
+  public Map<String, String[]> getCommandAliases();
+
+  /**
+   * Gets the radius, in blocks, around each worlds spawn point to protect.
+   *
+   * @return spawn radius, or 0 if none
+   */
+  public int getSpawnRadius();
+
+  /**
+   * Sets the radius, in blocks, around each worlds spawn point to protect.
+   *
+   * @param value new spawn radius, or 0 if none
+   */
+  public void setSpawnRadius(int value);
+
+  /**
+   * Gets whether the Server is in online mode or not.
+   *
+   * @return true if the server authenticates clients, false otherwise
+   */
+  public boolean getOnlineMode();
+
+  /**
+   * Gets whether this server allows flying or not.
+   *
+   * @return true if the server allows flight, false otherwise
+   */
+  public boolean getAllowFlight();
+
+  /**
+   * Gets whether the server is in hardcore mode or not.
+   *
+   * @return true if the server mode is hardcore, false otherwise
+   */
+  public boolean isHardcore();
+
+  /**
+   * Shutdowns the server, stopping everything.
+   */
+  public void shutdown();
+
+  /**
+   * Broadcasts the specified message to every user with the given
+   * permission name.
+   *
+   * @param message    message to broadcast
+   * @param permission the required permission {@link Permissible
+   *                   permissibles} must have to receive the broadcast
+   * @return number of message recipients
+   * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}
+   */
+  @Deprecated // Paper
+  public int broadcast(@NotNull String message, @NotNull String permission);
+  // Paper start
+
+  /**
+   * Broadcasts the specified message to every user with the given
+   * permission name.
+   *
+   * @param message    message to broadcast
+   * @param permission the required permission {@link Permissible
+   *                   permissibles} must have to receive the broadcast
+   * @return number of message recipients
+   */
+  int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission);
+  // Paper end
+
+  /**
+   * Gets the player by the given name, regardless if they are offline or
+   * online.
+   * <p>
+   * This method may involve a blocking web request to get the UUID for the
+   * given name.
+   * <p>
+   * This will return an object even if the player does not exist. To this
+   * method, all players will exist.
+   *
+   * @param name the name the player to retrieve
+   * @return an offline player
+   * @see #getOfflinePlayer(java.util.UUID)
+   * @deprecated Persistent storage of users should be by UUID as names are no longer
+   * unique past a single session.
+   */
+  @Deprecated
+  @NotNull
+  public OfflinePlayer getOfflinePlayer(@NotNull String name);
+
+  // Paper start
+
+  /**
+   * Gets the player by the given name, regardless if they are offline or
+   * online.
+   * <p>
+   * This will not make a web request to get the UUID for the given name,
+   * thus this method will not block. However this method will return
+   * {@code null} if the player is not cached.
+   * </p>
+   *
+   * @param name the name of the player to retrieve
+   * @return an offline player if cached, {@code null} otherwise
+   * @see #getOfflinePlayer(String)
+   * @see #getOfflinePlayer(java.util.UUID)
+   */
+  @Nullable
+  public OfflinePlayer getOfflinePlayerIfCached(@NotNull String name);
+  // Paper end
+
+  /**
+   * Gets the player by the given UUID, regardless if they are offline or
+   * online.
+   * <p>
+   * This will return an object even if the player does not exist. To this
+   * method, all players will exist.
+   *
+   * @param id the UUID of the player to retrieve
+   * @return an offline player
+   */
+  @NotNull
+  public OfflinePlayer getOfflinePlayer(@NotNull UUID id);
+
+  /**
+   * Gets a set containing all current IPs that are banned.
+   *
+   * @return a set containing banned IP addresses
+   */
+  @NotNull
+  public Set<String> getIPBans();
+
+  /**
+   * Bans the specified address from the server.
+   *
+   * @param address the IP address to ban
+   */
+  public void banIP(@NotNull String address);
+
+  /**
+   * Unbans the specified address from the server.
+   *
+   * @param address the IP address to unban
+   */
+  public void unbanIP(@NotNull String address);
+
+  /**
+   * Gets a set containing all banned players.
+   *
+   * @return a set containing banned players
+   */
+  @NotNull
+  public Set<OfflinePlayer> getBannedPlayers();
+
+  /**
+   * Gets a ban list for the supplied type.
+   * <p>
+   * Bans by name are no longer supported and this method will return
+   * null when trying to request them. The replacement is bans by UUID.
+   *
+   * @param type the type of list to fetch, cannot be null
+   * @return a ban list of the specified type
+   */
+  @NotNull
+  public BanList getBanList(@NotNull BanList.Type type);
+
+  /**
+   * Gets a set containing all player operators.
+   *
+   * @return a set containing player operators
+   */
+  @NotNull
+  public Set<OfflinePlayer> getOperators();
+
+  /**
+   * Gets the default {@link GameMode} for new players.
+   *
+   * @return the default game mode
+   */
+  @NotNull
+  public GameMode getDefaultGameMode();
+
+  /**
+   * Sets the default {@link GameMode} for new players.
+   *
+   * @param mode the new game mode
+   */
+  public void setDefaultGameMode(@NotNull GameMode mode);
+
+  /**
+   * Gets a {@link ConsoleCommandSender} that may be used as an input source
+   * for this server.
+   *
+   * @return a console command sender
+   */
+  @NotNull
+  public ConsoleCommandSender getConsoleSender();
+
+  /**
+   * Gets the folder that contains all of the various {@link World}s.
+   *
+   * @return folder that contains all worlds
+   */
+  @NotNull
+  public File getWorldContainer();
+
+  /**
+   * Gets every player that has ever played on this server.
+   *
+   * @return an array containing all previous players
+   */
+  @NotNull
+  public OfflinePlayer[] getOfflinePlayers();
+
+  /**
+   * Gets the {@link Messenger} responsible for this server.
+   *
+   * @return messenger responsible for this server
+   */
+  @NotNull
+  public Messenger getMessenger();
+
+  /**
+   * Gets the {@link HelpMap} providing help topics for this server.
+   *
+   * @return a help map for this server
+   */
+  @NotNull
+  public HelpMap getHelpMap();
+
+  /**
+   * Creates an empty inventory with the specified type. If the type
+   * is {@link InventoryType#CHEST}, the new inventory has a size of 27;
+   * otherwise the new inventory has the normal size for its type.
+   * <br>
+   * {@link InventoryType#WORKBENCH} will not process crafting recipes if
+   * created with this method. Use
+   * {@link Player#openWorkbench(Location, boolean)} instead.
+   * <br>
+   * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s
+   * for possible enchanting results. Use
+   * {@link Player#openEnchanting(Location, boolean)} instead.
+   *
+   * @param owner the holder of the inventory, or null to indicate no holder
+   * @param type  the type of inventory to create
+   * @return a new inventory
+   * @throws IllegalArgumentException if the {@link InventoryType} cannot be
+   *                                  viewed.
+   * @see InventoryType#isCreatable()
+   */
+  @NotNull
+  Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type);
+
+  // Paper start
+
+  /**
+   * Creates an empty inventory with the specified type and title. If the type
+   * is {@link InventoryType#CHEST}, the new inventory has a size of 27;
+   * otherwise the new inventory has the normal size for its type.<br>
+   * It should be noted that some inventory types do not support titles and
+   * may not render with said titles on the Minecraft client.
+   * <br>
+   * {@link InventoryType#WORKBENCH} will not process crafting recipes if
+   * created with this method. Use
+   * {@link Player#openWorkbench(Location, boolean)} instead.
+   * <br>
+   * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s
+   * for possible enchanting results. Use
+   * {@link Player#openEnchanting(Location, boolean)} instead.
+   *
+   * @param owner The holder of the inventory; can be null if there's no holder.
+   * @param type  The type of inventory to create.
+   * @param title The title of the inventory, to be displayed when it is viewed.
+   * @return The new inventory.
+   * @throws IllegalArgumentException if the {@link InventoryType} cannot be
+   *                                  viewed.
+   * @see InventoryType#isCreatable()
+   */
+  @NotNull
+  Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title);
+  // Paper end
+
+  /**
+   * Creates an empty inventory with the specified type and title. If the type
+   * is {@link InventoryType#CHEST}, the new inventory has a size of 27;
+   * otherwise the new inventory has the normal size for its type.<br>
+   * It should be noted that some inventory types do not support titles and
+   * may not render with said titles on the Minecraft client.
+   * <br>
+   * {@link InventoryType#WORKBENCH} will not process crafting recipes if
+   * created with this method. Use
+   * {@link Player#openWorkbench(Location, boolean)} instead.
+   * <br>
+   * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s
+   * for possible enchanting results. Use
+   * {@link Player#openEnchanting(Location, boolean)} instead.
+   *
+   * @param owner The holder of the inventory; can be null if there's no holder.
+   * @param type  The type of inventory to create.
+   * @param title The title of the inventory, to be displayed when it is viewed.
+   * @return The new inventory.
+   * @throws IllegalArgumentException if the {@link InventoryType} cannot be
+   *                                  viewed.
+   * @see InventoryType#isCreatable()
+   * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}
+   */
+  @Deprecated // Paper
+  @NotNull
+  Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title);
+
+  /**
+   * Creates an empty inventory of type {@link InventoryType#CHEST} with the
+   * specified size.
+   *
+   * @param owner the holder of the inventory, or null to indicate no holder
+   * @param size  a multiple of 9 as the size of inventory to create
+   * @return a new inventory
+   * @throws IllegalArgumentException if the size is not a multiple of 9
+   */
+  @NotNull
+  Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;
+
+  // Paper start
+
+  /**
+   * Creates an empty inventory of type {@link InventoryType#CHEST} with the
+   * specified size and title.
+   *
+   * @param owner the holder of the inventory, or null to indicate no holder
+   * @param size  a multiple of 9 as the size of inventory to create
+   * @param title the title of the inventory, displayed when inventory is
+   *              viewed
+   * @return a new inventory
+   * @throws IllegalArgumentException if the size is not a multiple of 9
+   */
+  @NotNull
+  Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException;
+  // Paper end
+
+  /**
+   * Creates an empty inventory of type {@link InventoryType#CHEST} with the
+   * specified size and title.
+   *
+   * @param owner the holder of the inventory, or null to indicate no holder
+   * @param size  a multiple of 9 as the size of inventory to create
+   * @param title the title of the inventory, displayed when inventory is
+   *              viewed
+   * @return a new inventory
+   * @throws IllegalArgumentException if the size is not a multiple of 9
+   * @deprecated in favour of {@link #createInventory(InventoryHolder, int, net.kyori.adventure.text.Component)}
+   */
+  @Deprecated // Paper
+  @NotNull
+  Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;
+
+  // Paper start
+
+  /**
+   * Creates an empty merchant.
+   *
+   * @param title the title of the corresponding merchant inventory, displayed
+   *              when the merchant inventory is viewed
+   * @return a new merchant
+   */
+  @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title);
+  // Paper start
+
+  /**
+   * Creates an empty merchant.
+   *
+   * @param title the title of the corresponding merchant inventory, displayed
+   *              when the merchant inventory is viewed
+   * @return a new merchant
+   * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}
+   */
+  @NotNull
+  @Deprecated
+  // Paper
+  Merchant createMerchant(@Nullable String title);
+
+  /**
+   * Gets user-specified limit for number of monsters that can spawn in a
+   * chunk.
+   *
+   * @return the monster spawn limit
+   */
+  int getMonsterSpawnLimit();
+
+  /**
+   * Gets user-specified limit for number of animals that can spawn in a
+   * chunk.
+   *
+   * @return the animal spawn limit
+   */
+  int getAnimalSpawnLimit();
+
+  /**
+   * Gets user-specified limit for number of water animals that can spawn in
+   * a chunk.
+   *
+   * @return the water animal spawn limit
+   */
+  int getWaterAnimalSpawnLimit();
+
+  /**
+   * Gets user-specified limit for number of water ambient mobs that can spawn
+   * in a chunk.
+   *
+   * @return the water ambient spawn limit
+   */
+  int getWaterAmbientSpawnLimit();
+
+  /**
+   * Gets user-specified limit for number of ambient mobs that can spawn in
+   * a chunk.
+   *
+   * @return the ambient spawn limit
+   */
+  int getAmbientSpawnLimit();
+
+  /**
+   * Checks the current thread against the expected primary thread for the
+   * server.
+   * <p>
+   * <b>Note:</b> this method should not be used to indicate the current
+   * synchronized state of the runtime. A current thread matching the main
+   * thread indicates that it is synchronized, but a mismatch <b>does not
+   * preclude</b> the same assumption.
+   *
+   * @return true if the current thread matches the expected primary thread,
+   * false otherwise
+   */
+  boolean isPrimaryThread();
+
+  // Paper start
+
+  /**
+   * Gets the message that is displayed on the server list.
+   *
+   * @return the server's MOTD
+   */
+  @NotNull net.kyori.adventure.text.Component motd();
+  // Paper end
+
+  /**
+   * Gets the message that is displayed on the server list.
+   *
+   * @return the servers MOTD
+   * @deprecated in favour of {@link #motd()}
+   */
+  @NotNull
+  @Deprecated
+  // Paper
+  String getMotd();
+
+  // Paper start
+
+  /**
+   * Gets the default message that is displayed when the server is stopped.
+   *
+   * @return the shutdown message
+   */
+  @Nullable net.kyori.adventure.text.Component shutdownMessage();
+  // Paper end
+
+  /**
+   * Gets the default message that is displayed when the server is stopped.
+   *
+   * @return the shutdown message
+   * @deprecated in favour of {@link #shutdownMessage()}
+   */
+  @Nullable
+  @Deprecated
+  // Paper
+  String getShutdownMessage();
+
+  /**
+   * Gets the current warning state for the server.
+   *
+   * @return the configured warning state
+   */
+  @NotNull
+  public WarningState getWarningState();
+
+  /**
+   * Gets the instance of the item factory (for {@link ItemMeta}).
+   *
+   * @return the item factory
+   * @see ItemFactory
+   */
+  @NotNull
+  ItemFactory getItemFactory();
+
+  /**
+   * Gets the instance of the scoreboard manager.
+   * <p>
+   * This will only exist after the first world has loaded.
+   *
+   * @return the scoreboard manager or null if no worlds are loaded.
+   */
+  @NotNull // Paper
+  ScoreboardManager getScoreboardManager();
+
+  /**
+   * Gets an instance of the server's default server-icon.
+   *
+   * @return the default server-icon; null values may be used by the
+   * implementation to indicate no defined icon, but this behavior is
+   * not guaranteed
+   */
+  @Nullable
+  CachedServerIcon getServerIcon();
+
+  /**
+   * Loads an image from a file, and returns a cached image for the specific
+   * server-icon.
+   * <p>
+   * Size and type are implementation defined. An incompatible file is
+   * guaranteed to throw an implementation-defined {@link Exception}.
+   *
+   * @param file the file to load the from
+   * @return a cached server-icon that can be used for a {@link
+   * ServerListPingEvent#setServerIcon(CachedServerIcon)}
+   * @throws IllegalArgumentException if image is null
+   * @throws Exception                if the image does not meet current server server-icon
+   *                                  specifications
+   */
+  @NotNull
+  CachedServerIcon loadServerIcon(@NotNull File file) throws IllegalArgumentException, Exception;
+
+  /**
+   * Creates a cached server-icon for the specific image.
+   * <p>
+   * Size and type are implementation defined. An incompatible file is
+   * guaranteed to throw an implementation-defined {@link Exception}.
+   *
+   * @param image the image to use
+   * @return a cached server-icon that can be used for a {@link
+   * ServerListPingEvent#setServerIcon(CachedServerIcon)}
+   * @throws IllegalArgumentException if image is null
+   * @throws Exception                if the image does not meet current server
+   *                                  server-icon specifications
+   */
+  @NotNull
+  CachedServerIcon loadServerIcon(@NotNull BufferedImage image) throws IllegalArgumentException, Exception;
+
+  /**
+   * Set the idle kick timeout. Any players idle for the specified amount of
+   * time will be automatically kicked.
+   * <p>
+   * A value of 0 will disable the idle kick timeout.
+   *
+   * @param threshold the idle timeout in minutes
+   */
+  public void setIdleTimeout(int threshold);
+
+  /**
+   * Gets the idle kick timeout.
+   *
+   * @return the idle timeout in minutes
+   */
+  public int getIdleTimeout();
+
+  /**
+   * Create a ChunkData for use in a generator.
+   * <p>
+   * See {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}
+   *
+   * @param world the world to create the ChunkData for
+   * @return a new ChunkData for the world
+   */
+  @NotNull
+  public ChunkGenerator.ChunkData createChunkData(@NotNull World world);
+
+  // Paper start
+
+  /**
+   * Create a ChunkData for use in a generator, that is populated by the vanilla generator for that world
+   *
+   * @param world the world to create the ChunkData for
+   * @param x     the x coordinate of the chunk
+   * @param z     the z coordinate of the chunk
+   * @return a new ChunkData for the world
+   */
+  @NotNull
+  ChunkGenerator.ChunkData createVanillaChunkData(@NotNull World world, int x, int z);
+  // Paper end
+
+  /**
+   * Creates a boss bar instance to display to players. The progress
+   * defaults to 1.0
+   *
+   * @param title the title of the boss bar
+   * @param color the color of the boss bar
+   * @param style the style of the boss bar
+   * @param flags an optional list of flags to set on the boss bar
+   * @return the created boss bar
+   */
+  @NotNull
+  BossBar createBossBar(@Nullable String title, @NotNull BarColor color, @NotNull BarStyle style, @NotNull BarFlag... flags);
+
+  /**
+   * Creates a boss bar instance to display to players. The progress defaults
+   * to 1.0.
+   * <br>
+   * This instance is added to the persistent storage of the server and will
+   * be editable by commands and restored after restart.
+   *
+   * @param key   the key of the boss bar that is used to access the boss bar
+   * @param title the title of the boss bar
+   * @param color the color of the boss bar
+   * @param style the style of the boss bar
+   * @param flags an optional list of flags to set on the boss bar
+   * @return the created boss bar
+   */
+  @NotNull
+  KeyedBossBar createBossBar(@NotNull NamespacedKey key, @Nullable String title, @NotNull BarColor color, @NotNull BarStyle style, @NotNull BarFlag... flags);
+
+  /**
+   * Gets an unmodifiable iterator through all persistent bossbars.
+   * <ul>
+   *   <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>
+   *   <li>
+   *     <b>not</b> created using
+   *     {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}
+   *   </li>
+   * </ul>
+   * <p>
+   * e.g. bossbars created using the bossbar command
+   *
+   * @return a bossbar iterator
+   */
+  @NotNull
+  Iterator<KeyedBossBar> getBossBars();
+
+  /**
+   * Gets the {@link KeyedBossBar} specified by this key.
+   * <ul>
+   *   <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>
+   *   <li>
+   *     <b>not</b> created using
+   *     {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}
+   *   </li>
+   * </ul>
+   * <p>
+   * e.g. bossbars created using the bossbar command
+   *
+   * @param key unique bossbar key
+   * @return bossbar or null if not exists
+   */
+  @Nullable
+  KeyedBossBar getBossBar(@NotNull NamespacedKey key);
+
+  /**
+   * Removes a {@link KeyedBossBar} specified by this key.
+   * <ul>
+   *   <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>
+   *   <li>
+   *     <b>not</b> created using
+   *     {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}
+   *   </li>
+   * </ul>
+   * <p>
+   * e.g. bossbars created using the bossbar command
+   *
+   * @param key unique bossbar key
+   * @return true if removal succeeded or false
+   */
+  boolean removeBossBar(@NotNull NamespacedKey key);
+
+  /**
+   * Gets an entity on the server by its UUID
+   *
+   * @param uuid the UUID of the entity
+   * @return the entity with the given UUID, or null if it isn't found
+   */
+  @Nullable
+  Entity getEntity(@NotNull UUID uuid);
+
+  // Paper start
+
+  /**
+   * Gets the current server TPS
+   *
+   * @return current server TPS (1m, 5m, 15m in Paper-Server)
+   */
+  @NotNull
+  public double[] getTPS();
+
+  /**
+   * Get a sample of the servers last tick times (in nanos)
+   *
+   * @return A sample of the servers last tick times (in nanos)
+   */
+  @NotNull
+  long[] getTickTimes();
+
+  /**
+   * Get the average tick time (in millis)
+   *
+   * @return Average tick time (in millis)
+   */
+  double getAverageTickTime();
+  // Paper end
+
+  // Paper start
+
+  /**
+   * Gets the active {@link org.bukkit.command.CommandMap}
+   *
+   * @return the active command map
+   */
+  @NotNull
+  org.bukkit.command.CommandMap getCommandMap();
+
+  /**
+   * Get the advancement specified by this key.
+   *
+   * @param key unique advancement key
+   * @return advancement or null if not exists
+   */
+  @Nullable
+  Advancement getAdvancement(@NotNull NamespacedKey key);
+
+  /**
+   * Get an iterator through all advancements. Advancements cannot be removed
+   * from this iterator,
+   *
+   * @return an advancement iterator
+   */
+  @NotNull
+  Iterator<Advancement> advancementIterator();
+
+  /**
+   * Creates a new {@link BlockData} instance for the specified Material, with
+   * all properties initialized to unspecified defaults.
+   *
+   * @param material the material
+   * @return new data instance
+   */
+  @NotNull
+  BlockData createBlockData(@NotNull Material material);
+
+  /**
+   * Creates a new {@link BlockData} instance for the specified Material, with
+   * all properties initialized to unspecified defaults.
+   *
+   * @param material the material
+   * @param consumer consumer to run on new instance before returning
+   * @return new data instance
+   */
+  @NotNull
+  public BlockData createBlockData(@NotNull Material material, @Nullable Consumer<BlockData> consumer);
+
+  /**
+   * Creates a new {@link BlockData} instance with material and properties
+   * parsed from provided data.
+   *
+   * @param data data string
+   * @return new data instance
+   * @throws IllegalArgumentException if the specified data is not valid
+   */
+  @NotNull
+  BlockData createBlockData(@NotNull String data) throws IllegalArgumentException;
+
+  /**
+   * Creates a new {@link BlockData} instance for the specified Material, with
+   * all properties initialized to unspecified defaults, except for those
+   * provided in data.
+   * <br>
+   * If <code>material</code> is specified, then the data string must not also
+   * contain the material.
+   *
+   * @param material the material
+   * @param data     data string
+   * @return new data instance
+   * @throws IllegalArgumentException if the specified data is not valid
+   */
+  @NotNull
+  @Contract("null, null -> fail")
+  BlockData createBlockData(@Nullable Material material, @Nullable String data) throws IllegalArgumentException;
+
+  /**
+   * Gets a tag which has already been defined within the server. Plugins are
+   * suggested to use the concrete tags in {@link Tag} rather than this method
+   * which makes no guarantees about which tags are available, and may also be
+   * less performant due to lack of caching.
+   * <br>
+   * Tags will be searched for in an implementation specific manner, but a
+   * path consisting of namespace/tags/registry/key is expected.
+   * <br>
+   * Server implementations are allowed to handle only the registries
+   * indicated in {@link Tag}.
+   *
+   * @param <T>      type of the tag
+   * @param registry the tag registry to look at
+   * @param tag      the name of the tag
+   * @param clazz    the class of the tag entries
+   * @return the tag or null
+   */
+  @UndefinedNullability
+  <T extends Keyed> Tag<T> getTag(@NotNull String registry, @NotNull NamespacedKey tag, @NotNull Class<T> clazz);
+
+  /**
+   * Gets a all tags which have been defined within the server.
+   * <br>
+   * Server implementations are allowed to handle only the registries
+   * indicated in {@link Tag}.
+   * <br>
+   * No guarantees are made about the mutability of the returned iterator.
+   *
+   * @param <T>      type of the tag
+   * @param registry the tag registry to look at
+   * @param clazz    the class of the tag entries
+   * @return all defined tags
+   */
+  @NotNull <T extends Keyed> Iterable<Tag<T>> getTags(@NotNull String registry, @NotNull Class<T> clazz);
+
+  /**
+   * Gets the specified {@link LootTable}.
+   *
+   * @param key the name of the LootTable
+   * @return the LootTable, or null if no LootTable is found with that name
+   */
+  @Nullable
+  LootTable getLootTable(@NotNull NamespacedKey key);
+
+  /**
+   * Selects entities using the given Vanilla selector.
+   * <br>
+   * No guarantees are made about the selector format, other than they match
+   * the Vanilla format for the active Minecraft version.
+   * <br>
+   * Usually a selector will start with '@', unless selecting a Player in
+   * which case it may simply be the Player's name or UUID.
+   * <br>
+   * Note that in Vanilla, elevated permissions are usually required to use
+   * '@' selectors, but this method should not check such permissions from the
+   * sender.
+   *
+   * @param sender   the sender to execute as, must be provided
+   * @param selector the selection string
+   * @return a list of the selected entities. The list will not be null, but
+   * no further guarantees are made.
+   * @throws IllegalArgumentException if the selector is malformed in any way
+   *                                  or a parameter is null
+   */
+  @NotNull
+  List<Entity> selectEntities(@NotNull CommandSender sender, @NotNull String selector) throws IllegalArgumentException;
+
+  /**
+   * @return the unsafe values instance
+   * @see UnsafeValues
+   */
+  @Deprecated
+  @NotNull
+  UnsafeValues getUnsafe();
+
+  String getFullServerName();
+
+  void pushServerState();
+
+  // Spigot start
+  public abstract class Spigot {
+
+    @NotNull
+    public org.bukkit.configuration.file.YamlConfiguration getConfig() {
+      throw new UnsupportedOperationException("Not supported yet.");
+    }
 
-    /**
-     * Gets the Bukkit version that this server is running.
-     *
-     * @return version of Bukkit
-     */
+    // Paper start
     @NotNull
-    public String getBukkitVersion();
+    public org.bukkit.configuration.file.YamlConfiguration getBukkitConfig() {
+      throw new UnsupportedOperationException("Not supported yet.");
+    }
 
-    // Paper start - expose game version
-    /**
-     * Gets the version of game this server implements
-     *
-     * @return version of game
-     */
     @NotNull
-    String getMinecraftVersion();
-    // Paper end
+    public org.bukkit.configuration.file.YamlConfiguration getSpigotConfig() {
+      throw new UnsupportedOperationException("Not supported yet.");
+    }
 
-    /**
-     * Gets a view of all currently logged in players. This {@linkplain
-     * Collections#unmodifiableCollection(Collection) view} is a reused
-     * object, making some operations like {@link Collection#size()}
-     * zero-allocation.
-     * <p>
-     * The collection is a view backed by the internal representation, such
-     * that, changes to the internal state of the server will be reflected
-     * immediately. However, the reuse of the returned collection (identity)
-     * is not strictly guaranteed for future or all implementations. Casting
-     * the collection, or relying on interface implementations (like {@link
-     * Serializable} or {@link List}), is deprecated.
-     * <p>
-     * Iteration behavior is undefined outside of self-contained main-thread
-     * uses. Normal and immediate iterator use without consequences that
-     * affect the collection are fully supported. The effects following
-     * (non-exhaustive) {@link Entity#teleport(Location) teleportation},
-     * {@link Player#setHealth(double) death}, and {@link Player#kickPlayer(
-     * String) kicking} are undefined. Any use of this collection from
-     * asynchronous threads is unsafe.
-     * <p>
-     * For safe consequential iteration or mimicking the old array behavior,
-     * using {@link Collection#toArray(Object[])} is recommended. For making
-     * snapshots, {@link ImmutableList#copyOf(Collection)} is recommended.
-     *
-     * @return a view of currently online players.
-     */
     @NotNull
-    public Collection<? extends Player> getOnlinePlayers();
-
-    /**
-     * Get the maximum amount of players which can login to this server.
-     *
-     * @return the amount of players this server allows
-     */
-    public int getMaxPlayers();
-
-    // Paper start
-    /**
-     * Set the maximum amount of players which can login to this server.
-     *
-     * @param maxPlayers the amount of players this server allows
-     */
-    public void setMaxPlayers(int maxPlayers);
+    public org.bukkit.configuration.file.YamlConfiguration getPaperConfig() {
+      throw new UnsupportedOperationException("Not supported yet.");
+    }
     // Paper end
 
-    /**
-     * Get the game port that the server runs on.
-     *
-     * @return the port number of this server
-     */
-    public int getPort();
-
-    /**
-     * Get the view distance from this server.
-     *
-     * @return the view distance from this server.
-     */
-    public int getViewDistance();
-
-    /**
-     * Get the IP that this server is bound to, or empty string if not
-     * specified.
-     *
-     * @return the IP string that this server is bound to, otherwise empty
-     *     string
-     */
-    @NotNull
-    public String getIp();
-
-    /**
-     * Get world type (level-type setting) for default world.
-     *
-     * @return the value of level-type (e.g. DEFAULT, FLAT, DEFAULT_1_1)
-     */
-    @NotNull
-    public String getWorldType();
-
-    /**
-     * Get generate-structures setting.
-     *
-     * @return true if structure generation is enabled, false otherwise
-     */
-    public boolean getGenerateStructures();
-
-    /**
-     * Get max world size.
-     *
-     * @return the maximum world size as specified for the server
-     */
-    public int getMaxWorldSize();
-
-    /**
-     * Gets whether this server allows the End or not.
-     *
-     * @return whether this server allows the End or not
-     */
-    public boolean getAllowEnd();
-
-    /**
-     * Gets whether this server allows the Nether or not.
-     *
-     * @return whether this server allows the Nether or not
-     */
-    public boolean getAllowNether();
-
-    /**
-     * Gets whether this server has a whitelist or not.
-     *
-     * @return whether this server has a whitelist or not
-     */
-    public boolean hasWhitelist();
-
-    /**
-     * Sets if the server is whitelisted.
-     *
-     * @param value true for whitelist on, false for off
-     */
-    public void setWhitelist(boolean value);
-
-    /**
-     * Gets a list of whitelisted players.
-     *
-     * @return a set containing all whitelisted players
-     */
+    // Tuinity start - add config to timings report
     @NotNull
-    public Set<OfflinePlayer> getWhitelistedPlayers();
-
-    /**
-     * Reloads the whitelist from disk.
-     */
-    public void reloadWhitelist();
+    public org.bukkit.configuration.file.YamlConfiguration getTuinityConfig() {
+      throw new UnsupportedOperationException("Not supported yet.");
+    }
+    // Tuinity end - add config to timings report
 
     /**
-     * Broadcast a message to all players.
-     * <p>
-     * This is the same as calling {@link #broadcast(java.lang.String,
-     * java.lang.String)} to {@link #BROADCAST_CHANNEL_USERS}
+     * Sends the component to the player
      *
-     * @param message the message
-     * @return the number of players
+     * @param component the components to send
      * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
      */
     @Deprecated // Paper
-    public int broadcastMessage(@NotNull String message);
-
-    // Paper start
-    /**
-     * Sends the component to all online players.
-     *
-     * @param component the component to send
-     * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
-     */
-    @Deprecated
-    public default void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
-        spigot().broadcast(component);
+    public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+      throw new UnsupportedOperationException("Not supported yet.");
     }
 
     /**
-     * Sends an array of components as a single message to all online players.
+     * Sends an array of components as a single message to the player
      *
      * @param components the components to send
      * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
      */
-    @Deprecated
-    public default void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
-        spigot().broadcast(components);
+    @Deprecated // Paper
+    public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+      throw new UnsupportedOperationException("Not supported yet.");
     }
-    // Paper end
-
-    /**
-     * Gets the name of the update folder. The update folder is used to safely
-     * update plugins at the right moment on a plugin load.
-     * <p>
-     * The update folder name is relative to the plugins folder.
-     *
-     * @return the name of the update folder
-     */
-    @NotNull
-    public String getUpdateFolder();
-
-    /**
-     * Gets the update folder. The update folder is used to safely update
-     * plugins at the right moment on a plugin load.
-     *
-     * @return the update folder
-     */
-    @NotNull
-    public File getUpdateFolderFile();
-
-    /**
-     * Gets the value of the connection throttle setting.
-     *
-     * @return the value of the connection throttle setting
-     */
-    public long getConnectionThrottle();
-
-    /**
-     * Gets default ticks per animal spawns value.
-     * <p>
-     * <b>Example Usage:</b>
-     * <ul>
-     * <li>A value of 1 will mean the server will attempt to spawn monsters
-     *     every tick.
-     * <li>A value of 400 will mean the server will attempt to spawn monsters
-     *     every 400th tick.
-     * <li>A value below 0 will be reset back to Minecraft's default.
-     * </ul>
-     * <p>
-     * <b>Note:</b> If set to 0, animal spawning will be disabled. We
-     * recommend using spawn-animals to control this instead.
-     * <p>
-     * Minecraft default: 400.
-     *
-     * @return the default ticks per animal spawns value
-     */
-    public int getTicksPerAnimalSpawns();
-
-    /**
-     * Gets the default ticks per monster spawns value.
-     * <p>
-     * <b>Example Usage:</b>
-     * <ul>
-     * <li>A value of 1 will mean the server will attempt to spawn monsters
-     *     every tick.
-     * <li>A value of 400 will mean the server will attempt to spawn monsters
-     *     every 400th tick.
-     * <li>A value below 0 will be reset back to Minecraft's default.
-     * </ul>
-     * <p>
-     * <b>Note:</b> If set to 0, monsters spawning will be disabled. We
-     * recommend using spawn-monsters to control this instead.
-     * <p>
-     * Minecraft default: 1.
-     *
-     * @return the default ticks per monsters spawn value
-     */
-    public int getTicksPerMonsterSpawns();
-
-    /**
-     * Gets the default ticks per water mob spawns value.
-     * <p>
-     * <b>Example Usage:</b>
-     * <ul>
-     * <li>A value of 1 will mean the server will attempt to spawn water mobs
-     *     every tick.
-     * <li>A value of 400 will mean the server will attempt to spawn water mobs
-     *     every 400th tick.
-     * <li>A value below 0 will be reset back to Minecraft's default.
-     * </ul>
-     * <p>
-     * <b>Note:</b> If set to 0, water mobs spawning will be disabled.
-     * <p>
-     * Minecraft default: 1.
-     *
-     * @return the default ticks per water mobs spawn value
-     */
-    public int getTicksPerWaterSpawns();
-
-    /**
-     * Gets the default ticks per water ambient mob spawns value.
-     * <p>
-     * <b>Example Usage:</b>
-     * <ul>
-     * <li>A value of 1 will mean the server will attempt to spawn water ambient mobs
-     *     every tick.
-     * <li>A value of 400 will mean the server will attempt to spawn water ambient mobs
-     *     every 400th tick.
-     * <li>A value below 0 will be reset back to Minecraft's default.
-     * </ul>
-     * <p>
-     * <b>Note:</b> If set to 0, ambient mobs spawning will be disabled.
-     * <p>
-     * Minecraft default: 1.
-     *
-     * @return the default ticks per water ambient mobs spawn value
-     */
-    public int getTicksPerWaterAmbientSpawns();
-
-    /**
-     * Gets the default ticks per ambient mob spawns value.
-     * <p>
-     * <b>Example Usage:</b>
-     * <ul>
-     * <li>A value of 1 will mean the server will attempt to spawn ambient mobs
-     *     every tick.
-     * <li>A value of 400 will mean the server will attempt to spawn ambient mobs
-     *     every 400th tick.
-     * <li>A value below 0 will be reset back to Minecraft's default.
-     * </ul>
-     * <p>
-     * <b>Note:</b> If set to 0, ambient mobs spawning will be disabled.
-     * <p>
-     * Minecraft default: 1.
-     *
-     * @return the default ticks per ambient mobs spawn value
-     */
-    public int getTicksPerAmbientSpawns();
-
-    /**
-     * Gets a player object by the given username.
-     * <p>
-     * This method may not return objects for offline players.
-     *
-     * @param name the name to look up
-     * @return a player if one was found, null otherwise
-     */
-    @Nullable
-    public Player getPlayer(@NotNull String name);
-
-    /**
-     * Gets the player with the exact given name, case insensitive.
-     *
-     * @param name Exact name of the player to retrieve
-     * @return a player object if one was found, null otherwise
-     */
-    @Nullable
-    public Player getPlayerExact(@NotNull String name);
-
-    /**
-     * Attempts to match any players with the given name, and returns a list
-     * of all possibly matches.
-     * <p>
-     * This list is not sorted in any particular order. If an exact match is
-     * found, the returned list will only contain a single result.
-     *
-     * @param name the (partial) name to match
-     * @return list of all possible players
-     */
-    @NotNull
-    public List<Player> matchPlayer(@NotNull String name);
-
-    /**
-     * Gets the player with the given UUID.
-     *
-     * @param id UUID of the player to retrieve
-     * @return a player object if one was found, null otherwise
-     */
-    @Nullable
-    public Player getPlayer(@NotNull UUID id);
-
-    // Paper start
-    /**
-     * Gets the unique ID of the player currently known as the specified player name
-     * In Offline Mode, will return an Offline UUID
-     *
-     * @param playerName the player name to look up the unique ID for
-     * @return A UUID, or null if that player name is not registered with Minecraft and the server is in online mode
-     */
-    @Nullable
-    public UUID getPlayerUniqueId(@NotNull String playerName);
-    // Paper end
 
     // Matherion start
-    /**
-     * Gets the database manager for interacting with the database.
-     *
-     * @return a database manager for this Server instance
-     */
-    @Nullable
-    public DatabaseManager getDatabaseManager();
-
-    /**
-     * Gets the PubSub for interacting with the Server PubSub Service.
-     *
-     * @return a ServerPubSub instance
-     */
-    @Nullable
-    public ServerPubSub getPubSub();
-
-    /**
-     * Gets the redis manager for interacting with Redis.
-     *
-     * @return a redis manager for this Server instance
-     */
-    public ServerState getServerState();
-    // Matherion end
-
-    /**
-     * Gets the plugin manager for interfacing with plugins.
-     *
-     * @return a plugin manager for this Server instance
-     */
-    @NotNull
-    public PluginManager getPluginManager();
-
-    /**
-     * Gets the scheduler for managing scheduled events.
-     *
-     * @return a scheduling service for this server
-     */
-    @NotNull
-    public BukkitScheduler getScheduler();
+    public abstract YamlConfiguration getMatherionityConfig();
 
     /**
-     * Gets a services manager.
-     *
-     * @return s services manager
-     */
-    @NotNull
-    public ServicesManager getServicesManager();
-
-    /**
-     * Gets a list of all worlds on this server.
-     *
-     * @return a list of worlds
-     */
-    @NotNull
-    public List<World> getWorlds();
-
-    /**
-     * Creates or loads a world with the given name using the specified
-     * options.
-     * <p>
-     * If the world is already loaded, it will just return the equivalent of
-     * getWorld(creator.name()).
-     *
-     * @param creator the options to use when creating the world
-     * @return newly created or loaded world
-     */
-    @Nullable
-    public World createWorld(@NotNull WorldCreator creator);
-
-    /**
-     * Unloads a world with the given name.
-     *
-     * @param name Name of the world to unload
-     * @param save whether to save the chunks before unloading
-     * @return true if successful, false otherwise
-     */
-    public boolean unloadWorld(@NotNull String name, boolean save);
-
-    /**
-     * Unloads the given world.
-     *
-     * @param world the world to unload
-     * @param save whether to save the chunks before unloading
-     * @return true if successful, false otherwise
-     */
-    public boolean unloadWorld(@NotNull World world, boolean save);
-
-    /**
-     * Gets the world with the given name.
-     *
-     * @param name the name of the world to retrieve
-     * @return a world with the given name, or null if none exists
-     */
-    @Nullable
-    public World getWorld(@NotNull String name);
-
-    /**
-     * Gets the world from the given Unique ID.
-     *
-     * @param uid a unique-id of the world to retrieve
-     * @return a world with the given Unique ID, or null if none exists
-     */
-    @Nullable
-    public World getWorld(@NotNull UUID uid);
-
-    // Paper start
-    /**
-     * Gets the world from the given NamespacedKey
-     *
-     * @param worldKey the NamespacedKey of the world to retrieve
-     * @return a world with the given NamespacedKey, or null if none exists
-     */
-    @Nullable
-    public World getWorld(@NotNull NamespacedKey worldKey);
-    // Paper end
-
-    /**
-     * Gets the map from the given item ID.
-     *
-     * @param id the id of the map to get
-     * @return a map view if it exists, or null otherwise
-     * @deprecated Magic value
-     */
-    @Deprecated
-    @Nullable
-    public MapView getMap(int id);
-
-    /**
-     * Create a new map with an automatically assigned ID.
-     *
-     * @param world the world the map will belong to
-     * @return a newly created map view
-     */
-    @NotNull
-    public MapView createMap(@NotNull World world);
-
-    /**
-     * Create a new explorer map targeting the closest nearby structure of a
-     * given {@link StructureType}.
-     * <br>
-     * This method uses implementation default values for radius and
-     * findUnexplored (usually 100, true).
-     *
-     * @param world the world the map will belong to
-     * @param location the origin location to find the nearest structure
-     * @param structureType the type of structure to find
-     * @return a newly created item stack
-     *
-     * @see World#locateNearestStructure(org.bukkit.Location,
-     *      org.bukkit.StructureType, int, boolean)
-     */
-    @NotNull
-    public ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType);
-
-    /**
-     * Create a new explorer map targeting the closest nearby structure of a
-     * given {@link StructureType}.
-     * <br>
-     * This method uses implementation default values for radius and
-     * findUnexplored (usually 100, true).
-     *
-     * @param world the world the map will belong to
-     * @param location the origin location to find the nearest structure
-     * @param structureType the type of structure to find
-     * @param radius radius to search, see World#locateNearestStructure for more
-     *               information
-     * @param findUnexplored whether to find unexplored structures
-     * @return the newly created item stack
-     *
-     * @see World#locateNearestStructure(org.bukkit.Location,
-     *      org.bukkit.StructureType, int, boolean)
-     */
-    @NotNull
-    public ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType, int radius, boolean findUnexplored);
-
-    /**
-     * Reloads the server, refreshing settings and plugin information.
-     */
-    public void reload();
-
-    /**
-     * Reload only the Minecraft data for the server. This includes custom
-     * advancements and loot tables.
-     */
-    public void reloadData();
-
-    /**
-     * Returns the primary logger associated with this server instance.
-     *
-     * @return Logger associated with this server
+     * Restart the server. If the server administrator has not configured restarting, the server will stop.
      */
-    @NotNull
-    public Logger getLogger();
-
-    /**
-     * Gets a {@link PluginCommand} with the given name or alias.
-     *
-     * @param name the name of the command to retrieve
-     * @return a plugin command if found, null otherwise
-     */
-    @Nullable
-    public PluginCommand getPluginCommand(@NotNull String name);
-
-    /**
-     * Writes loaded players to disk.
-     */
-    public void savePlayers();
-
-    /**
-     * Dispatches a command on this server, and executes it if found.
-     *
-     * @param sender the apparent sender of the command
-     * @param commandLine the command + arguments. Example: <code>test abc
-     *     123</code>
-     * @return returns false if no target is found
-     * @throws CommandException thrown when the executor for the given command
-     *     fails with an unhandled exception
-     */
-    public boolean dispatchCommand(@NotNull CommandSender sender, @NotNull String commandLine) throws CommandException;
-
-    /**
-     * Adds a recipe to the crafting manager.
-     *
-     * @param recipe the recipe to add
-     * @return true if the recipe was added, false if it wasn't for some
-     *     reason
-     */
-    @Contract("null -> false")
-    public boolean addRecipe(@Nullable Recipe recipe);
-
-    /**
-     * Get a list of all recipes for a given item. The stack size is ignored
-     * in comparisons. If the durability is -1, it will match any data value.
-     *
-     * @param result the item to match against recipe results
-     * @return a list of recipes with the given result
-     */
-    @NotNull
-    public List<Recipe> getRecipesFor(@NotNull ItemStack result);
-
-    /**
-     * Get the {@link Recipe} for the given key.
-     *
-     * @param recipeKey the key of the recipe to return
-     * @return the recipe for the given key or null.
-     */
-    @Nullable
-    public Recipe getRecipe(@NotNull NamespacedKey recipeKey);
-
-    /**
-     * Get an iterator through the list of crafting recipes.
-     *
-     * @return an iterator
-     */
-    @NotNull
-    public Iterator<Recipe> recipeIterator();
-
-    /**
-     * Clears the list of crafting recipes.
-     */
-    public void clearRecipes();
-
-    /**
-     * Resets the list of crafting recipes to the default.
-     */
-    public void resetRecipes();
-
-    /**
-     * Remove a recipe from the server.
-     *
-     * <b>Note that removing a recipe may cause permanent loss of data
-     * associated with that recipe (eg whether it has been discovered by
-     * players).</b>
-     *
-     * @param key NamespacedKey of recipe to remove.
-     * @return True if recipe was removed
-     */
-    public boolean removeRecipe(@NotNull NamespacedKey key);
-
-    /**
-     * Gets a list of command aliases defined in the server properties.
-     *
-     * @return a map of aliases to command names
-     */
-    @NotNull
-    public Map<String, String[]> getCommandAliases();
-
-    /**
-     * Gets the radius, in blocks, around each worlds spawn point to protect.
-     *
-     * @return spawn radius, or 0 if none
-     */
-    public int getSpawnRadius();
-
-    /**
-     * Sets the radius, in blocks, around each worlds spawn point to protect.
-     *
-     * @param value new spawn radius, or 0 if none
-     */
-    public void setSpawnRadius(int value);
-
-    /**
-     * Gets whether the Server is in online mode or not.
-     *
-     * @return true if the server authenticates clients, false otherwise
-     */
-    public boolean getOnlineMode();
-
-    /**
-     * Gets whether this server allows flying or not.
-     *
-     * @return true if the server allows flight, false otherwise
-     */
-    public boolean getAllowFlight();
-
-    /**
-     * Gets whether the server is in hardcore mode or not.
-     *
-     * @return true if the server mode is hardcore, false otherwise
-     */
-    public boolean isHardcore();
-
-    /**
-     * Shutdowns the server, stopping everything.
-     */
-    public void shutdown();
-
-    /**
-     * Broadcasts the specified message to every user with the given
-     * permission name.
-     *
-     * @param message message to broadcast
-     * @param permission the required permission {@link Permissible
-     *     permissibles} must have to receive the broadcast
-     * @return number of message recipients
-     * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}
-     */
-    @Deprecated // Paper
-    public int broadcast(@NotNull String message, @NotNull String permission);
-    // Paper start
-    /**
-     * Broadcasts the specified message to every user with the given
-     * permission name.
-     *
-     * @param message message to broadcast
-     * @param permission the required permission {@link Permissible
-     *     permissibles} must have to receive the broadcast
-     * @return number of message recipients
-     */
-    int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission);
-    // Paper end
-
-    /**
-     * Gets the player by the given name, regardless if they are offline or
-     * online.
-     * <p>
-     * This method may involve a blocking web request to get the UUID for the
-     * given name.
-     * <p>
-     * This will return an object even if the player does not exist. To this
-     * method, all players will exist.
-     *
-     * @deprecated Persistent storage of users should be by UUID as names are no longer
-     *             unique past a single session.
-     * @param name the name the player to retrieve
-     * @return an offline player
-     * @see #getOfflinePlayer(java.util.UUID)
-     */
-    @Deprecated
-    @NotNull
-    public OfflinePlayer getOfflinePlayer(@NotNull String name);
-
-    // Paper start
-    /**
-     * Gets the player by the given name, regardless if they are offline or
-     * online.
-     * <p>
-     * This will not make a web request to get the UUID for the given name,
-     * thus this method will not block. However this method will return
-     * {@code null} if the player is not cached.
-     * </p>
-     *
-     * @param name the name of the player to retrieve
-     * @return an offline player if cached, {@code null} otherwise
-     * @see #getOfflinePlayer(String)
-     * @see #getOfflinePlayer(java.util.UUID)
-     */
-    @Nullable
-    public OfflinePlayer getOfflinePlayerIfCached(@NotNull String name);
-    // Paper end
-
-    /**
-     * Gets the player by the given UUID, regardless if they are offline or
-     * online.
-     * <p>
-     * This will return an object even if the player does not exist. To this
-     * method, all players will exist.
-     *
-     * @param id the UUID of the player to retrieve
-     * @return an offline player
-     */
-    @NotNull
-    public OfflinePlayer getOfflinePlayer(@NotNull UUID id);
-
-    /**
-     * Gets a set containing all current IPs that are banned.
-     *
-     * @return a set containing banned IP addresses
-     */
-    @NotNull
-    public Set<String> getIPBans();
-
-    /**
-     * Bans the specified address from the server.
-     *
-     * @param address the IP address to ban
-     */
-    public void banIP(@NotNull String address);
-
-    /**
-     * Unbans the specified address from the server.
-     *
-     * @param address the IP address to unban
-     */
-    public void unbanIP(@NotNull String address);
-
-    /**
-     * Gets a set containing all banned players.
-     *
-     * @return a set containing banned players
-     */
-    @NotNull
-    public Set<OfflinePlayer> getBannedPlayers();
-
-    /**
-     * Gets a ban list for the supplied type.
-     * <p>
-     * Bans by name are no longer supported and this method will return
-     * null when trying to request them. The replacement is bans by UUID.
-     *
-     * @param type the type of list to fetch, cannot be null
-     * @return a ban list of the specified type
-     */
-    @NotNull
-    public BanList getBanList(@NotNull BanList.Type type);
-
-    /**
-     * Gets a set containing all player operators.
-     *
-     * @return a set containing player operators
-     */
-    @NotNull
-    public Set<OfflinePlayer> getOperators();
-
-    /**
-     * Gets the default {@link GameMode} for new players.
-     *
-     * @return the default game mode
-     */
-    @NotNull
-    public GameMode getDefaultGameMode();
-
-    /**
-     * Sets the default {@link GameMode} for new players.
-     *
-     * @param mode the new game mode
-     */
-    public void setDefaultGameMode(@NotNull GameMode mode);
-
-    /**
-     * Gets a {@link ConsoleCommandSender} that may be used as an input source
-     * for this server.
-     *
-     * @return a console command sender
-     */
-    @NotNull
-    public ConsoleCommandSender getConsoleSender();
-
-    /**
-     * Gets the folder that contains all of the various {@link World}s.
-     *
-     * @return folder that contains all worlds
-     */
-    @NotNull
-    public File getWorldContainer();
-
-    /**
-     * Gets every player that has ever played on this server.
-     *
-     * @return an array containing all previous players
-     */
-    @NotNull
-    public OfflinePlayer[] getOfflinePlayers();
-
-    /**
-     * Gets the {@link Messenger} responsible for this server.
-     *
-     * @return messenger responsible for this server
-     */
-    @NotNull
-    public Messenger getMessenger();
-
-    /**
-     * Gets the {@link HelpMap} providing help topics for this server.
-     *
-     * @return a help map for this server
-     */
-    @NotNull
-    public HelpMap getHelpMap();
-
-    /**
-     * Creates an empty inventory with the specified type. If the type
-     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;
-     * otherwise the new inventory has the normal size for its type.
-     * <br>
-     * {@link InventoryType#WORKBENCH} will not process crafting recipes if
-     * created with this method. Use
-     * {@link Player#openWorkbench(Location, boolean)} instead.
-     * <br>
-     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s
-     * for possible enchanting results. Use
-     * {@link Player#openEnchanting(Location, boolean)} instead.
-     *
-     * @param owner the holder of the inventory, or null to indicate no holder
-     * @param type the type of inventory to create
-     * @return a new inventory
-     * @throws IllegalArgumentException if the {@link InventoryType} cannot be
-     * viewed.
-     *
-     * @see InventoryType#isCreatable()
-     */
-    @NotNull
-    Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type);
-
-    // Paper start
-    /**
-     * Creates an empty inventory with the specified type and title. If the type
-     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;
-     * otherwise the new inventory has the normal size for its type.<br>
-     * It should be noted that some inventory types do not support titles and
-     * may not render with said titles on the Minecraft client.
-     * <br>
-     * {@link InventoryType#WORKBENCH} will not process crafting recipes if
-     * created with this method. Use
-     * {@link Player#openWorkbench(Location, boolean)} instead.
-     * <br>
-     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s
-     * for possible enchanting results. Use
-     * {@link Player#openEnchanting(Location, boolean)} instead.
-     *
-     * @param owner The holder of the inventory; can be null if there's no holder.
-     * @param type The type of inventory to create.
-     * @param title The title of the inventory, to be displayed when it is viewed.
-     * @return The new inventory.
-     * @throws IllegalArgumentException if the {@link InventoryType} cannot be
-     * viewed.
-     *
-     * @see InventoryType#isCreatable()
-     */
-    @NotNull
-    Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title);
-    // Paper end
-
-    /**
-     * Creates an empty inventory with the specified type and title. If the type
-     * is {@link InventoryType#CHEST}, the new inventory has a size of 27;
-     * otherwise the new inventory has the normal size for its type.<br>
-     * It should be noted that some inventory types do not support titles and
-     * may not render with said titles on the Minecraft client.
-     * <br>
-     * {@link InventoryType#WORKBENCH} will not process crafting recipes if
-     * created with this method. Use
-     * {@link Player#openWorkbench(Location, boolean)} instead.
-     * <br>
-     * {@link InventoryType#ENCHANTING} will not process {@link ItemStack}s
-     * for possible enchanting results. Use
-     * {@link Player#openEnchanting(Location, boolean)} instead.
-     *
-     * @param owner The holder of the inventory; can be null if there's no holder.
-     * @param type The type of inventory to create.
-     * @param title The title of the inventory, to be displayed when it is viewed.
-     * @return The new inventory.
-     * @throws IllegalArgumentException if the {@link InventoryType} cannot be
-     * viewed.
-     * @deprecated in favour of {@link #createInventory(InventoryHolder, InventoryType, net.kyori.adventure.text.Component)}
-     *
-     * @see InventoryType#isCreatable()
-     */
-    @Deprecated // Paper
-    @NotNull
-    Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title);
-
-    /**
-     * Creates an empty inventory of type {@link InventoryType#CHEST} with the
-     * specified size.
-     *
-     * @param owner the holder of the inventory, or null to indicate no holder
-     * @param size a multiple of 9 as the size of inventory to create
-     * @return a new inventory
-     * @throws IllegalArgumentException if the size is not a multiple of 9
-     */
-    @NotNull
-    Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException;
-
-    // Paper start
-    /**
-     * Creates an empty inventory of type {@link InventoryType#CHEST} with the
-     * specified size and title.
-     *
-     * @param owner the holder of the inventory, or null to indicate no holder
-     * @param size a multiple of 9 as the size of inventory to create
-     * @param title the title of the inventory, displayed when inventory is
-     *     viewed
-     * @return a new inventory
-     * @throws IllegalArgumentException if the size is not a multiple of 9
-     */
-    @NotNull
-    Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException;
-    // Paper end
-
-    /**
-     * Creates an empty inventory of type {@link InventoryType#CHEST} with the
-     * specified size and title.
-     *
-     * @param owner the holder of the inventory, or null to indicate no holder
-     * @param size a multiple of 9 as the size of inventory to create
-     * @param title the title of the inventory, displayed when inventory is
-     *     viewed
-     * @return a new inventory
-     * @throws IllegalArgumentException if the size is not a multiple of 9
-     * @deprecated in favour of {@link #createInventory(InventoryHolder, int, net.kyori.adventure.text.Component)}
-     */
-    @Deprecated // Paper
-    @NotNull
-    Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException;
-
-    // Paper start
-    /**
-     * Creates an empty merchant.
-     *
-     * @param title the title of the corresponding merchant inventory, displayed
-     * when the merchant inventory is viewed
-     * @return a new merchant
-     */
-    @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title);
-    // Paper start
-    /**
-     * Creates an empty merchant.
-     *
-     * @param title the title of the corresponding merchant inventory, displayed
-     * when the merchant inventory is viewed
-     * @return a new merchant
-     * @deprecated in favour of {@link #createMerchant(net.kyori.adventure.text.Component)}
-     */
-    @NotNull
-    @Deprecated // Paper
-    Merchant createMerchant(@Nullable String title);
-
-    /**
-     * Gets user-specified limit for number of monsters that can spawn in a
-     * chunk.
-     *
-     * @return the monster spawn limit
-     */
-    int getMonsterSpawnLimit();
-
-    /**
-     * Gets user-specified limit for number of animals that can spawn in a
-     * chunk.
-     *
-     * @return the animal spawn limit
-     */
-    int getAnimalSpawnLimit();
-
-    /**
-     * Gets user-specified limit for number of water animals that can spawn in
-     * a chunk.
-     *
-     * @return the water animal spawn limit
-     */
-    int getWaterAnimalSpawnLimit();
-
-    /**
-     * Gets user-specified limit for number of water ambient mobs that can spawn
-     * in a chunk.
-     *
-     * @return the water ambient spawn limit
-     */
-    int getWaterAmbientSpawnLimit();
-
-    /**
-     * Gets user-specified limit for number of ambient mobs that can spawn in
-     * a chunk.
-     *
-     * @return the ambient spawn limit
-     */
-    int getAmbientSpawnLimit();
-
-    /**
-     * Checks the current thread against the expected primary thread for the
-     * server.
-     * <p>
-     * <b>Note:</b> this method should not be used to indicate the current
-     * synchronized state of the runtime. A current thread matching the main
-     * thread indicates that it is synchronized, but a mismatch <b>does not
-     * preclude</b> the same assumption.
-     *
-     * @return true if the current thread matches the expected primary thread,
-     *     false otherwise
-     */
-    boolean isPrimaryThread();
-
-    // Paper start
-    /**
-     * Gets the message that is displayed on the server list.
-     *
-     * @return the server's MOTD
-     */
-    @NotNull net.kyori.adventure.text.Component motd();
-    // Paper end
-
-    /**
-     * Gets the message that is displayed on the server list.
-     *
-     * @return the servers MOTD
-     * @deprecated in favour of {@link #motd()}
-     */
-    @NotNull
-    @Deprecated // Paper
-    String getMotd();
-
-    // Paper start
-    /**
-     * Gets the default message that is displayed when the server is stopped.
-     *
-     * @return the shutdown message
-     */
-    @Nullable net.kyori.adventure.text.Component shutdownMessage();
-    // Paper end
-    /**
-     * Gets the default message that is displayed when the server is stopped.
-     *
-     * @return the shutdown message
-     * @deprecated in favour of {@link #shutdownMessage()}
-     */
-    @Nullable
-    @Deprecated // Paper
-    String getShutdownMessage();
-
-    /**
-     * Gets the current warning state for the server.
-     *
-     * @return the configured warning state
-     */
-    @NotNull
-    public WarningState getWarningState();
-
-    /**
-     * Gets the instance of the item factory (for {@link ItemMeta}).
-     *
-     * @return the item factory
-     * @see ItemFactory
-     */
-    @NotNull
-    ItemFactory getItemFactory();
-
-    /**
-     * Gets the instance of the scoreboard manager.
-     * <p>
-     * This will only exist after the first world has loaded.
-     *
-     * @return the scoreboard manager or null if no worlds are loaded.
-     */
-    @NotNull // Paper
-    ScoreboardManager getScoreboardManager();
-
-    /**
-     * Gets an instance of the server's default server-icon.
-     *
-     * @return the default server-icon; null values may be used by the
-     *     implementation to indicate no defined icon, but this behavior is
-     *     not guaranteed
-     */
-    @Nullable
-    CachedServerIcon getServerIcon();
-
-    /**
-     * Loads an image from a file, and returns a cached image for the specific
-     * server-icon.
-     * <p>
-     * Size and type are implementation defined. An incompatible file is
-     * guaranteed to throw an implementation-defined {@link Exception}.
-     *
-     * @param file the file to load the from
-     * @throws IllegalArgumentException if image is null
-     * @throws Exception if the image does not meet current server server-icon
-     *     specifications
-     * @return a cached server-icon that can be used for a {@link
-     *     ServerListPingEvent#setServerIcon(CachedServerIcon)}
-     */
-    @NotNull
-    CachedServerIcon loadServerIcon(@NotNull File file) throws IllegalArgumentException, Exception;
-
-    /**
-     * Creates a cached server-icon for the specific image.
-     * <p>
-     * Size and type are implementation defined. An incompatible file is
-     * guaranteed to throw an implementation-defined {@link Exception}.
-     *
-     * @param image the image to use
-     * @throws IllegalArgumentException if image is null
-     * @throws Exception if the image does not meet current server
-     *     server-icon specifications
-     * @return a cached server-icon that can be used for a {@link
-     *     ServerListPingEvent#setServerIcon(CachedServerIcon)}
-     */
-    @NotNull
-    CachedServerIcon loadServerIcon(@NotNull BufferedImage image) throws IllegalArgumentException, Exception;
-
-    /**
-     * Set the idle kick timeout. Any players idle for the specified amount of
-     * time will be automatically kicked.
-     * <p>
-     * A value of 0 will disable the idle kick timeout.
-     *
-     * @param threshold the idle timeout in minutes
-     */
-    public void setIdleTimeout(int threshold);
-
-    /**
-     * Gets the idle kick timeout.
-     *
-     * @return the idle timeout in minutes
-     */
-    public int getIdleTimeout();
-
-    /**
-     * Create a ChunkData for use in a generator.
-     *
-     * See {@link ChunkGenerator#generateChunkData(org.bukkit.World, java.util.Random, int, int, org.bukkit.generator.ChunkGenerator.BiomeGrid)}
-     *
-     * @param world the world to create the ChunkData for
-     * @return a new ChunkData for the world
-     *
-     */
-    @NotNull
-    public ChunkGenerator.ChunkData createChunkData(@NotNull World world);
-
-    // Paper start
-    /**
-     * Create a ChunkData for use in a generator, that is populated by the vanilla generator for that world
-     *
-     * @param world the world to create the ChunkData for
-     * @param x the x coordinate of the chunk
-     * @param z the z coordinate of the chunk
-     * @return a new ChunkData for the world
-     *
-     */
-    @NotNull
-    ChunkGenerator.ChunkData createVanillaChunkData(@NotNull World world, int x, int z);
-    // Paper end
-
-    /**
-     * Creates a boss bar instance to display to players. The progress
-     * defaults to 1.0
-     *
-     * @param title the title of the boss bar
-     * @param color the color of the boss bar
-     * @param style the style of the boss bar
-     * @param flags an optional list of flags to set on the boss bar
-     * @return the created boss bar
-     */
-    @NotNull
-    BossBar createBossBar(@Nullable String title, @NotNull BarColor color, @NotNull BarStyle style, @NotNull BarFlag... flags);
-
-    /**
-     * Creates a boss bar instance to display to players. The progress defaults
-     * to 1.0.
-     * <br>
-     * This instance is added to the persistent storage of the server and will
-     * be editable by commands and restored after restart.
-     *
-     * @param key the key of the boss bar that is used to access the boss bar
-     * @param title the title of the boss bar
-     * @param color the color of the boss bar
-     * @param style the style of the boss bar
-     * @param flags an optional list of flags to set on the boss bar
-     * @return the created boss bar
-     */
-    @NotNull
-    KeyedBossBar createBossBar(@NotNull NamespacedKey key, @Nullable String title, @NotNull BarColor color, @NotNull BarStyle style, @NotNull BarFlag... flags);
-
-    /**
-     * Gets an unmodifiable iterator through all persistent bossbars.
-     * <ul>
-     *   <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>
-     *   <li>
-     *     <b>not</b> created using
-     *     {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}
-     *   </li>
-     * </ul>
-     *
-     * e.g. bossbars created using the bossbar command
-     *
-     * @return a bossbar iterator
-     */
-    @NotNull
-    Iterator<KeyedBossBar> getBossBars();
-
-    /**
-     * Gets the {@link KeyedBossBar} specified by this key.
-     * <ul>
-     *   <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>
-     *   <li>
-     *     <b>not</b> created using
-     *     {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}
-     *   </li>
-     * </ul>
-     *
-     * e.g. bossbars created using the bossbar command
-     *
-     * @param key unique bossbar key
-     * @return bossbar or null if not exists
-     */
-    @Nullable
-    KeyedBossBar getBossBar(@NotNull NamespacedKey key);
-
-    /**
-     * Removes a {@link KeyedBossBar} specified by this key.
-     * <ul>
-     *   <li><b>not</b> bound to a {@link org.bukkit.entity.Boss}</li>
-     *   <li>
-     *     <b>not</b> created using
-     *     {@link #createBossBar(String, BarColor, BarStyle, BarFlag...)}
-     *   </li>
-     * </ul>
-     *
-     * e.g. bossbars created using the bossbar command
-     *
-     * @param key unique bossbar key
-     * @return true if removal succeeded or false
-     */
-    boolean removeBossBar(@NotNull NamespacedKey key);
-
-    /**
-     * Gets an entity on the server by its UUID
-     *
-     * @param uuid the UUID of the entity
-     * @return the entity with the given UUID, or null if it isn't found
-     */
-    @Nullable
-    Entity getEntity(@NotNull UUID uuid);
-
-    // Paper start
-    /**
-     * Gets the current server TPS
-     *
-     * @return current server TPS (1m, 5m, 15m in Paper-Server)
-     */
-    @NotNull
-    public double[] getTPS();
-
-    /**
-     * Get a sample of the servers last tick times (in nanos)
-     *
-     * @return A sample of the servers last tick times (in nanos)
-     */
-    @NotNull
-    long[] getTickTimes();
-
-    /**
-     * Get the average tick time (in millis)
-     *
-     * @return Average tick time (in millis)
-     */
-    double getAverageTickTime();
-    // Paper end
-
-    // Paper start
-    /**
-     * Gets the active {@link org.bukkit.command.CommandMap}
-     *
-     * @return the active command map
-     */
-    @NotNull
-    org.bukkit.command.CommandMap getCommandMap();
-
-    /**
-     * Get the advancement specified by this key.
-     *
-     * @param key unique advancement key
-     * @return advancement or null if not exists
-     */
-    @Nullable
-    Advancement getAdvancement(@NotNull NamespacedKey key);
-
-    /**
-     * Get an iterator through all advancements. Advancements cannot be removed
-     * from this iterator,
-     *
-     * @return an advancement iterator
-     */
-    @NotNull
-    Iterator<Advancement> advancementIterator();
-
-    /**
-     * Creates a new {@link BlockData} instance for the specified Material, with
-     * all properties initialized to unspecified defaults.
-     *
-     * @param material the material
-     * @return new data instance
-     */
-    @NotNull
-    BlockData createBlockData(@NotNull Material material);
-
-    /**
-     * Creates a new {@link BlockData} instance for the specified Material, with
-     * all properties initialized to unspecified defaults.
-     *
-     * @param material the material
-     * @param consumer consumer to run on new instance before returning
-     * @return new data instance
-     */
-    @NotNull
-    public BlockData createBlockData(@NotNull Material material, @Nullable Consumer<BlockData> consumer);
-
-    /**
-     * Creates a new {@link BlockData} instance with material and properties
-     * parsed from provided data.
-     *
-     * @param data data string
-     * @return new data instance
-     * @throws IllegalArgumentException if the specified data is not valid
-     */
-    @NotNull
-    BlockData createBlockData(@NotNull String data) throws IllegalArgumentException;
-
-    /**
-     * Creates a new {@link BlockData} instance for the specified Material, with
-     * all properties initialized to unspecified defaults, except for those
-     * provided in data.
-     * <br>
-     * If <code>material</code> is specified, then the data string must not also
-     * contain the material.
-     *
-     * @param material the material
-     * @param data data string
-     * @return new data instance
-     * @throws IllegalArgumentException if the specified data is not valid
-     */
-    @NotNull
-    @Contract("null, null -> fail")
-    BlockData createBlockData(@Nullable Material material, @Nullable String data) throws IllegalArgumentException;
-
-    /**
-     * Gets a tag which has already been defined within the server. Plugins are
-     * suggested to use the concrete tags in {@link Tag} rather than this method
-     * which makes no guarantees about which tags are available, and may also be
-     * less performant due to lack of caching.
-     * <br>
-     * Tags will be searched for in an implementation specific manner, but a
-     * path consisting of namespace/tags/registry/key is expected.
-     * <br>
-     * Server implementations are allowed to handle only the registries
-     * indicated in {@link Tag}.
-     *
-     * @param <T> type of the tag
-     * @param registry the tag registry to look at
-     * @param tag the name of the tag
-     * @param clazz the class of the tag entries
-     * @return the tag or null
-     */
-    @UndefinedNullability
-    <T extends Keyed> Tag<T> getTag(@NotNull String registry, @NotNull NamespacedKey tag, @NotNull Class<T> clazz);
-
-    /**
-     * Gets a all tags which have been defined within the server.
-     * <br>
-     * Server implementations are allowed to handle only the registries
-     * indicated in {@link Tag}.
-     * <br>
-     * No guarantees are made about the mutability of the returned iterator.
-     *
-     * @param <T> type of the tag
-     * @param registry the tag registry to look at
-     * @param clazz the class of the tag entries
-     * @return all defined tags
-     */
-    @NotNull
-    <T extends Keyed> Iterable<Tag<T>> getTags(@NotNull String registry, @NotNull Class<T> clazz);
-
-    /**
-     * Gets the specified {@link LootTable}.
-     *
-     * @param key the name of the LootTable
-     * @return the LootTable, or null if no LootTable is found with that name
-     */
-    @Nullable
-    LootTable getLootTable(@NotNull NamespacedKey key);
-
-    /**
-     * Selects entities using the given Vanilla selector.
-     * <br>
-     * No guarantees are made about the selector format, other than they match
-     * the Vanilla format for the active Minecraft version.
-     * <br>
-     * Usually a selector will start with '@', unless selecting a Player in
-     * which case it may simply be the Player's name or UUID.
-     * <br>
-     * Note that in Vanilla, elevated permissions are usually required to use
-     * '@' selectors, but this method should not check such permissions from the
-     * sender.
-     *
-     * @param sender the sender to execute as, must be provided
-     * @param selector the selection string
-     * @return a list of the selected entities. The list will not be null, but
-     * no further guarantees are made.
-     * @throws IllegalArgumentException if the selector is malformed in any way
-     * or a parameter is null
-     */
-    @NotNull
-    List<Entity> selectEntities(@NotNull CommandSender sender, @NotNull String selector) throws IllegalArgumentException;
-
-    /**
-     * @see UnsafeValues
-     * @return the unsafe values instance
-     */
-    @Deprecated
-    @NotNull
-    UnsafeValues getUnsafe();
-
-    // Spigot start
-    public abstract class Spigot {
-
-        @NotNull
-        public org.bukkit.configuration.file.YamlConfiguration getConfig() {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-
-        // Paper start
-        @NotNull
-        public org.bukkit.configuration.file.YamlConfiguration getBukkitConfig()
-        {
-            throw new UnsupportedOperationException( "Not supported yet." );
-        }
-
-        @NotNull
-        public org.bukkit.configuration.file.YamlConfiguration getSpigotConfig()
-        {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-
-        @NotNull
-        public org.bukkit.configuration.file.YamlConfiguration getPaperConfig()
-        {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-        // Paper end
-
-        // Tuinity start - add config to timings report
-        @NotNull
-        public org.bukkit.configuration.file.YamlConfiguration getTuinityConfig()
-        {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-        // Tuinity end - add config to timings report
-
-        /**
-         * Sends the component to the player
-         *
-         * @param component the components to send
-         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
-         */
-        @Deprecated // Paper
-        public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-
-        /**
-         * Sends an array of components as a single message to the player
-         *
-         * @param components the components to send
-         * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
-         */
-        @Deprecated // Paper
-        public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-
-        // Matherion start
-        public abstract YamlConfiguration getMatherionityConfig();
-
-        /**
-         * Restart the server. If the server administrator has not configured restarting, the server will stop.
-         */
-        public void restart() {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
+    public void restart() {
+      throw new UnsupportedOperationException("Not supported yet.");
     }
-
-    @NotNull
-    Spigot spigot();
-    // Spigot end
-
-    void reloadPermissions(); // Paper
-
-    boolean reloadCommandAliases(); // Paper
-
-    // Paper start - allow preventing player name suggestions by default
-    /**
-     * Checks if player names should be suggested when a command returns {@code null} as
-     * their tab completion result.
-     *
-     * @return true if player names should be suggested
-     */
-    boolean suggestPlayerNamesWhenNullTabCompletions();
-
-    /**
-     *
-     * @return the default no permission message used on the server
-     */
-    @NotNull
-    String getPermissionMessage();
-
-    /**
-     * Creates a PlayerProfile for the specified uuid, with name as null
-     * @param uuid UUID to create profile for
-     * @return A PlayerProfile object
-     */
-    @NotNull
-    com.destroystokyo.paper.profile.PlayerProfile createProfile(@NotNull UUID uuid);
-
-    /**
-     * Creates a PlayerProfile for the specified name, with UUID as null
-     * @param name Name to create profile for
-     * @return A PlayerProfile object
-     */
-    @NotNull
-    com.destroystokyo.paper.profile.PlayerProfile createProfile(@NotNull String name);
-
-    /**
-     * Creates a PlayerProfile for the specified name/uuid
-     *
-     * Both UUID and Name can not be null at same time. One must be supplied.
-     *
-     * @param uuid UUID to create profile for
-     * @param name Name to create profile for
-     * @return A PlayerProfile object
-     */
-    @NotNull
-    com.destroystokyo.paper.profile.PlayerProfile createProfile(@Nullable UUID uuid, @Nullable String name);
-
-    /**
-     * Get the current internal server tick
-     *
-     * @return Current tick
-     */
-    int getCurrentTick();
-
-    /**
-     * Checks if the server is in the process of being shutdown.
-     *
-     * @return true if server is in the process of being shutdown
-     */
-    boolean isStopping();
-
-    /**
-     * Returns the {@link com.destroystokyo.paper.entity.ai.MobGoals} manager
-     *
-     * @return the mob goals manager
-     */
-    @NotNull
-    com.destroystokyo.paper.entity.ai.MobGoals getMobGoals();
-    // Paper end
+  }
+
+  @NotNull
+  Spigot spigot();
+  // Spigot end
+
+  void reloadPermissions(); // Paper
+
+  boolean reloadCommandAliases(); // Paper
+
+  // Paper start - allow preventing player name suggestions by default
+
+  /**
+   * Checks if player names should be suggested when a command returns {@code null} as
+   * their tab completion result.
+   *
+   * @return true if player names should be suggested
+   */
+  boolean suggestPlayerNamesWhenNullTabCompletions();
+
+  /**
+   * @return the default no permission message used on the server
+   */
+  @NotNull
+  String getPermissionMessage();
+
+  /**
+   * Creates a PlayerProfile for the specified uuid, with name as null
+   *
+   * @param uuid UUID to create profile for
+   * @return A PlayerProfile object
+   */
+  @NotNull
+  com.destroystokyo.paper.profile.PlayerProfile createProfile(@NotNull UUID uuid);
+
+  /**
+   * Creates a PlayerProfile for the specified name, with UUID as null
+   *
+   * @param name Name to create profile for
+   * @return A PlayerProfile object
+   */
+  @NotNull
+  com.destroystokyo.paper.profile.PlayerProfile createProfile(@NotNull String name);
+
+  /**
+   * Creates a PlayerProfile for the specified name/uuid
+   * <p>
+   * Both UUID and Name can not be null at same time. One must be supplied.
+   *
+   * @param uuid UUID to create profile for
+   * @param name Name to create profile for
+   * @return A PlayerProfile object
+   */
+  @NotNull
+  com.destroystokyo.paper.profile.PlayerProfile createProfile(@Nullable UUID uuid, @Nullable String name);
+
+  /**
+   * Get the current internal server tick
+   *
+   * @return Current tick
+   */
+  int getCurrentTick();
+
+  /**
+   * Checks if the server is in the process of being shutdown.
+   *
+   * @return true if server is in the process of being shutdown
+   */
+  boolean isStopping();
+
+  /**
+   * Returns the {@link com.destroystokyo.paper.entity.ai.MobGoals} manager
+   *
+   * @return the mob goals manager
+   */
+  @NotNull
+  com.destroystokyo.paper.entity.ai.MobGoals getMobGoals();
+  // Paper end
 }
